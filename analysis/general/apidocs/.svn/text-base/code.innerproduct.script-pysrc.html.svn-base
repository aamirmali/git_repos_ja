<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>code.innerproduct.script</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="code-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Project homepage -->
      <th class="navbar" align="right" width="100%">
        <table border="0" cellpadding="0" cellspacing="0">
          <tr><th class="navbar" align="center"
            >All</th>
          </tr></table></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="code-module.html">Package&nbsp;code</a> ::
        <a href="code.innerproduct-module.html">Package&nbsp;innerproduct</a> ::
        Module&nbsp;script
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="code.innerproduct.script-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="code.innerproduct.script-module.html">Module code.innerproduct.script</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-docstring">'''the functions for the script. To run the script, run the function</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-docstring">interpret_and_run(args), with the value returned by parse_argument as args. The</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-docstring">script will take in command-line arguments and run pointwise product analysis</tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-docstring">on data.'''</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">os</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">shutil</tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">argparse</tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">numpy</tt> <tt class="py-keyword">as</tt> <tt class="py-name">np</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">matplotlib</tt><tt class="py-op">.</tt><tt class="py-name">pyplot</tt> <tt class="py-keyword">as</tt> <tt class="py-name">plt</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-0" class="py-name" targets="Module code.innerproduct.pointwiseproduct=code.innerproduct.pointwiseproduct-module.html"><a title="code.innerproduct.pointwiseproduct" class="py-name" href="#" onclick="return doclink('link-0', 'pointwiseproduct', 'link-0');">pointwiseproduct</a></tt> <tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Class code.innerproduct.pointwiseproduct.PointwiseProduct=code.innerproduct.pointwiseproduct.PointwiseProduct-class.html"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct" class="py-name" href="#" onclick="return doclink('link-1', 'PointwiseProduct', 'link-1');">PointwiseProduct</a></tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-2" class="py-name" targets="Module code.innerproduct.similaritydrawer=code.innerproduct.similaritydrawer-module.html"><a title="code.innerproduct.similaritydrawer" class="py-name" href="#" onclick="return doclink('link-2', 'similaritydrawer', 'link-2');">similaritydrawer</a></tt> <tt class="py-keyword">import</tt> <tt id="link-3" class="py-name" targets="Class code.innerproduct.similaritydrawer.SimilarityDrawer=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer" class="py-name" href="#" onclick="return doclink('link-3', 'SimilarityDrawer', 'link-3');">SimilarityDrawer</a></tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-4" class="py-name" targets="Package code=code-module.html"><a title="code" class="py-name" href="#" onclick="return doclink('link-4', 'code', 'link-4');">code</a></tt><tt class="py-op">.</tt><tt id="link-5" class="py-name" targets="Package code.common=code.common-module.html"><a title="code.common" class="py-name" href="#" onclick="return doclink('link-5', 'common', 'link-5');">common</a></tt> <tt class="py-keyword">import</tt> <tt id="link-6" class="py-name" targets="Module code.common.exceptions=code.common.exceptions-module.html"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-6', 'exceptions', 'link-6');">exceptions</a></tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-keyword">from</tt> <tt id="link-7" class="py-name"><a title="code" class="py-name" href="#" onclick="return doclink('link-7', 'code', 'link-4');">code</a></tt><tt class="py-op">.</tt><tt id="link-8" class="py-name"><a title="code.common" class="py-name" href="#" onclick="return doclink('link-8', 'common', 'link-5');">common</a></tt> <tt class="py-keyword">import</tt> <tt id="link-9" class="py-name" targets="Module code.common.filehandler=code.common.filehandler-module.html"><a title="code.common.filehandler" class="py-name" href="#" onclick="return doclink('link-9', 'filehandler', 'link-9');">filehandler</a></tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"> </tt>
<a name="parse_arguments"></a><div id="parse_arguments-def"><a name="L17"></a><tt class="py-lineno"> 17</tt> <a class="py-toggle" href="#" id="parse_arguments-toggle" onclick="return toggle('parse_arguments');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#parse_arguments">parse_arguments</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="parse_arguments-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="parse_arguments-expanded"><a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line">    <tt class="py-docstring">'''Parses the command-line arguments with argparse. Use -h for help.</tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">    @return: the parsed arguments in a Namespace.</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: Namespace '''</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line">    <tt class="py-name">base_parser</tt><tt class="py-op">=</tt><tt id="link-10" class="py-name" targets="Function code.innerproduct.script.get_base_parser()=code.innerproduct.script-module.html#get_base_parser"><a title="code.innerproduct.script.get_base_parser" class="py-name" href="#" onclick="return doclink('link-10', 'get_base_parser', 'link-10');">get_base_parser</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line">    <tt class="py-name">npz_base_parser</tt><tt class="py-op">=</tt><tt id="link-11" class="py-name" targets="Function code.innerproduct.script.get_npz_base_parser()=code.innerproduct.script-module.html#get_npz_base_parser"><a title="code.innerproduct.script.get_npz_base_parser" class="py-name" href="#" onclick="return doclink('link-11', 'get_npz_base_parser', 'link-11');">get_npz_base_parser</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line">    <tt class="py-name">pic_base_parser</tt><tt class="py-op">=</tt><tt id="link-12" class="py-name" targets="Function code.innerproduct.script.get_pic_base_parser()=code.innerproduct.script-module.html#get_pic_base_parser"><a title="code.innerproduct.script.get_pic_base_parser" class="py-name" href="#" onclick="return doclink('link-12', 'get_pic_base_parser', 'link-12');">get_pic_base_parser</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line">    <tt id="link-13" class="py-name" targets="Variable code.common_mode.script.parser=code.common_mode.script-module.html#parser,Variable code.ellipsesdrawer.script.parser=code.ellipsesdrawer.script-module.html#parser,Variable code.outanalyzer.script.parser=code.outanalyzer.script-module.html#parser,Variable code.powerspectrum.script.parser=code.powerspectrum.script-module.html#parser,Variable code.stepdetector.script.parser=code.stepdetector.script-module.html#parser"><a title="code.common_mode.script.parser
code.ellipsesdrawer.script.parser
code.outanalyzer.script.parser
code.powerspectrum.script.parser
code.stepdetector.script.parser" class="py-name" href="#" onclick="return doclink('link-13', 'parser', 'link-13');">parser</a></tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentParser</tt><tt class="py-op">(</tt> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line">        <tt class="py-name">description</tt> <tt class="py-op">=</tt> <tt class="py-string">'Calculate and plot normalized pointwise product.'</tt>  </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'Use @filepath to read in arguments from a file'</tt><tt class="py-op">,</tt>  </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line">        <tt class="py-name">fromfile_prefix_chars</tt><tt class="py-op">=</tt><tt class="py-string">'@'</tt><tt class="py-op">,</tt>  </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line">        <tt class="py-name">formatter_class</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentDefaultsHelpFormatter</tt><tt class="py-op">)</tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line">    <tt id="link-14" class="py-name" targets="Variable code.stepdetector.script.subparsers=code.stepdetector.script-module.html#subparsers"><a title="code.stepdetector.script.subparsers" class="py-name" href="#" onclick="return doclink('link-14', 'subparsers', 'link-14');">subparsers</a></tt><tt class="py-op">=</tt><tt id="link-15" class="py-name"><a title="code.common_mode.script.parser
code.ellipsesdrawer.script.parser
code.outanalyzer.script.parser
code.powerspectrum.script.parser
code.stepdetector.script.parser" class="py-name" href="#" onclick="return doclink('link-15', 'parser', 'link-13');">parser</a></tt><tt class="py-op">.</tt><tt class="py-name">add_subparsers</tt><tt class="py-op">(</tt> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line">        <tt id="link-16" class="py-name" targets="Variable code.ellipsesdrawer.prettythingsdrawer.fig.title=code.ellipsesdrawer.prettythingsdrawer.fig-class.html#title"><a title="code.ellipsesdrawer.prettythingsdrawer.fig.title" class="py-name" href="#" onclick="return doclink('link-16', 'title', 'link-16');">title</a></tt><tt class="py-op">=</tt><tt class="py-string">'subcommands'</tt><tt class="py-op">,</tt> <tt class="py-name">description</tt><tt class="py-op">=</tt><tt class="py-string">'valid subcommands'</tt><tt class="py-op">,</tt>  </tt>
<a name="L31"></a><tt class="py-lineno"> 31</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'here are valid subcommands'</tt><tt class="py-op">,</tt> <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'subcommand'</tt><tt class="py-op">)</tt> </tt>
<a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line">    <tt class="py-name">run_parser</tt><tt class="py-op">=</tt><tt id="link-17" class="py-name"><a title="code.stepdetector.script.subparsers" class="py-name" href="#" onclick="return doclink('link-17', 'subparsers', 'link-14');">subparsers</a></tt><tt class="py-op">.</tt><tt class="py-name">add_parser</tt><tt class="py-op">(</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line">        <tt class="py-string">'run'</tt><tt class="py-op">,</tt> <tt class="py-name">parents</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-name">base_parser</tt><tt class="py-op">,</tt> <tt class="py-name">npz_base_parser</tt><tt class="py-op">,</tt> <tt class="py-name">pic_base_parser</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'Calculate the pointwise products and save them to a npz file,'</tt>  </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'and then use that file to save the graphical display of the'</tt>  </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'pointwise product. The saved files will be in a directory'</tt>  </tt>
<a name="L37"></a><tt class="py-lineno"> 37</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'placed in the same directory as the mce_file by default.'</tt><tt class="py-op">,</tt> </tt>
<a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line">        <tt class="py-name">epilog</tt><tt class="py-op">=</tt><tt class="py-string">'*All elements ignored will not be included in any analysis'</tt>  </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">' and will not be plotted.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line">        <tt class="py-name">formatter_class</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentDefaultsHelpFormatter</tt><tt class="py-op">)</tt> </tt>
<a name="L41"></a><tt class="py-lineno"> 41</tt>  <tt class="py-line">    <tt class="py-name">npz_parser</tt><tt class="py-op">=</tt><tt id="link-18" class="py-name"><a title="code.stepdetector.script.subparsers" class="py-name" href="#" onclick="return doclink('link-18', 'subparsers', 'link-14');">subparsers</a></tt><tt class="py-op">.</tt><tt class="py-name">add_parser</tt><tt class="py-op">(</tt> </tt>
<a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line">        <tt class="py-string">'npz'</tt><tt class="py-op">,</tt> <tt class="py-name">parents</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-name">base_parser</tt><tt class="py-op">,</tt> <tt class="py-name">npz_base_parser</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'Calculate the pointwise product and save them to a npz file. '</tt> </tt>
<a name="L44"></a><tt class="py-lineno"> 44</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'The saved file will be in a directory placed in '</tt>  </tt>
<a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'the same directory as the mce_file by default.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line">        <tt class="py-name">epilog</tt><tt class="py-op">=</tt><tt class="py-string">'*All elements ignored will not be included in any analysis,'</tt><tt class="py-op">,</tt>  </tt>
<a name="L47"></a><tt class="py-lineno"> 47</tt>  <tt class="py-line">        <tt class="py-name">formatter_class</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentDefaultsHelpFormatter</tt><tt class="py-op">)</tt> </tt>
<a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line">    <tt class="py-name">pic_parser</tt><tt class="py-op">=</tt><tt id="link-19" class="py-name"><a title="code.stepdetector.script.subparsers" class="py-name" href="#" onclick="return doclink('link-19', 'subparsers', 'link-14');">subparsers</a></tt><tt class="py-op">.</tt><tt class="py-name">add_parser</tt><tt class="py-op">(</tt> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line">        <tt class="py-string">'pic'</tt><tt class="py-op">,</tt> <tt class="py-name">parents</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-name">base_parser</tt><tt class="py-op">,</tt> <tt class="py-name">pic_base_parser</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L50"></a><tt class="py-lineno"> 50</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'Draws upon an npz file and plots the pointwiseproducts. '</tt>  </tt>
<a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'The saved file will be in a directory placed in '</tt>  </tt>
<a name="L52"></a><tt class="py-lineno"> 52</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'the same directory as the npz file by default.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line">        <tt class="py-name">epilog</tt><tt class="py-op">=</tt><tt class="py-string">'*All elements ignored will not be included in any plot '</tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'analysis and will not be plotted.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L55"></a><tt class="py-lineno"> 55</tt>  <tt class="py-line">        <tt class="py-name">formatter_class</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentDefaultsHelpFormatter</tt><tt class="py-op">)</tt> </tt>
<a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line">    <tt class="py-name">pic_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt><tt class="py-string">'npz_file'</tt><tt class="py-op">,</tt>  <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'?'</tt><tt class="py-op">,</tt>  </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'the file where the picture data will be read from.'</tt>  </tt>
<a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'This file is must be an npz file with the specific arrays.'</tt><tt class="py-op">)</tt> </tt>
<a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt id="link-20" class="py-name"><a title="code.common_mode.script.parser
code.ellipsesdrawer.script.parser
code.outanalyzer.script.parser
code.powerspectrum.script.parser
code.stepdetector.script.parser" class="py-name" href="#" onclick="return doclink('link-20', 'parser', 'link-13');">parser</a></tt><tt class="py-op">.</tt><tt class="py-name">parse_args</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
</div><a name="L60"></a><tt class="py-lineno"> 60</tt>  <tt class="py-line"> </tt>
<a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line"> </tt>
<a name="interpret_and_run"></a><div id="interpret_and_run-def"><a name="L62"></a><tt class="py-lineno"> 62</tt> <a class="py-toggle" href="#" id="interpret_and_run-toggle" onclick="return toggle('interpret_and_run');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#interpret_and_run">interpret_and_run</a><tt class="py-op">(</tt><tt class="py-param">args</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="interpret_and_run-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="interpret_and_run-expanded"><a name="L63"></a><tt class="py-lineno"> 63</tt>  <tt class="py-line">    <tt class="py-docstring">'''Interprets the arguments args, and does pointwise product analysis</tt> </tt>
<a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line"><tt class="py-docstring">    according to args.</tt> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line"><tt class="py-docstring">    @param args: the arguments returned by parse_args(). These arguments will</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line"><tt class="py-docstring">    determine how the program is ran.</tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line"><tt class="py-docstring">    @type args: Namespace '''</tt> </tt>
<a name="L68"></a><tt class="py-lineno"> 68</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">i</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt> <tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">,</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt id="link-21" class="py-name" targets="Variable code.common_mode.script.args=code.common_mode.script-module.html#args,Variable code.ellipsesdrawer.script.args=code.ellipsesdrawer.script-module.html#args,Variable code.outanalyzer.script.args=code.outanalyzer.script-module.html#args,Variable code.powerspectrum.script.args=code.powerspectrum.script-module.html#args,Variable code.stepdetector.script.args=code.stepdetector.script-module.html#args"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-21', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-22" class="py-name" targets="Variable code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#non_detectors"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-22', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line">            <tt id="link-23" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-23', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-24" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-24', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt> <tt class="py-op">=</tt> <tt class="py-name">eval</tt><tt class="py-op">(</tt><tt id="link-25" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-25', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-26" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-26', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt id="link-27" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-27', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">subcommand</tt><tt class="py-op">==</tt><tt class="py-string">'run'</tt> <tt class="py-keyword">or</tt> <tt id="link-28" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-28', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">subcommand</tt><tt class="py-op">==</tt><tt class="py-string">'npz'</tt><tt class="py-op">:</tt> </tt>
<a name="L71"></a><tt class="py-lineno"> 71</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt id="link-29" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-29', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">mce_file</tt><tt class="py-op">==</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line">            <tt class="py-keyword">raise</tt> <tt id="link-30" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-30', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-31" class="py-name" targets="Class code.common.exceptions.StupidityError=code.common.exceptions.StupidityError-class.html"><a title="code.common.exceptions.StupidityError" class="py-name" href="#" onclick="return doclink('link-31', 'StupidityError', 'link-31');">StupidityError</a></tt><tt class="py-op">(</tt><tt class="py-string">'No mce_file is specified.'</tt><tt class="py-op">)</tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt id="link-32" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-32', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">array_sum_filter</tt><tt class="py-op">==</tt><tt class="py-name">True</tt><tt class="py-op">:</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line">            <tt id="link-33" class="py-name" targets="Function code.common.multistreamfunctions.sum_filter()=code.common.multistreamfunctions-module.html#sum_filter"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-33', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">=</tt><tt class="py-string">'array_sum'</tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt id="link-34" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-34', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">column_filter</tt><tt class="py-op">==</tt><tt class="py-name">True</tt><tt class="py-op">:</tt> </tt>
<a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line">            <tt id="link-35" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-35', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">=</tt><tt class="py-string">'col_sum'</tt> </tt>
<a name="L77"></a><tt class="py-lineno"> 77</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt id="link-36" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-36', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">row_filter</tt><tt class="py-op">==</tt><tt class="py-name">True</tt><tt class="py-op">:</tt> </tt>
<a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line">            <tt id="link-37" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-37', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">=</tt><tt class="py-string">'row_sum'</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line">            <tt id="link-38" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-38', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">=</tt><tt class="py-name">None</tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line">        <tt class="py-name">save_directory_path</tt><tt class="py-op">=</tt><tt id="link-39" class="py-name" targets="Function code.innerproduct.script.initialize_data_save_directory()=code.innerproduct.script-module.html#initialize_data_save_directory"><a title="code.innerproduct.script.initialize_data_save_directory" class="py-name" href="#" onclick="return doclink('link-39', 'initialize_data_save_directory', 'link-39');">initialize_data_save_directory</a></tt><tt class="py-op">(</tt> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line">            <tt id="link-40" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-40', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">save_directory_name</tt><tt class="py-op">,</tt> <tt id="link-41" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-41', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">mce_file</tt><tt class="py-op">,</tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line">            <tt id="link-42" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-42', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">new_save_directory</tt><tt class="py-op">,</tt> <tt id="link-43" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-43', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">,</tt>  </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line">            <tt id="link-44" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-44', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">directory_save_location</tt><tt class="py-op">)</tt>     </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line">        <tt class="py-name">npz_file_path</tt><tt class="py-op">=</tt><tt id="link-45" class="py-name" targets="Function code.innerproduct.script.run_pointwiseproduct()=code.innerproduct.script-module.html#run_pointwiseproduct"><a title="code.innerproduct.script.run_pointwiseproduct" class="py-name" href="#" onclick="return doclink('link-45', 'run_pointwiseproduct', 'link-45');">run_pointwiseproduct</a></tt><tt class="py-op">(</tt> </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line">            <tt class="py-name">mce_file</tt><tt class="py-op">=</tt><tt id="link-46" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-46', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">mce_file</tt><tt class="py-op">,</tt> <tt class="py-name">save_directory_path</tt><tt class="py-op">=</tt><tt class="py-name">save_directory_path</tt><tt class="py-op">,</tt>  </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line">            <tt id="link-47" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-47', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">=</tt><tt id="link-48" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-48', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">,</tt> <tt class="py-name">non_columns</tt><tt class="py-op">=</tt><tt id="link-49" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-49', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">non_columns</tt><tt class="py-op">,</tt> </tt>
<a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">            <tt id="link-50" class="py-name" targets="Variable code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows=code.innerproduct.pointwiseproduct.PointwiseProduct-class.html#non_rows,Variable code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#non_rows"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-50', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">=</tt><tt id="link-51" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-51', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-52" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-52', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">,</tt> <tt id="link-53" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-53', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">=</tt><tt id="link-54" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-54', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-55" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-55', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">,</tt>  </tt>
<a name="L89"></a><tt class="py-lineno"> 89</tt>  <tt class="py-line">            <tt class="py-name">flipper</tt><tt class="py-op">=</tt><tt id="link-56" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-56', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">flipper</tt><tt class="py-op">)</tt> </tt>
<a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt id="link-57" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-57', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">subcommand</tt><tt class="py-op">==</tt><tt class="py-string">'run'</tt> <tt class="py-keyword">or</tt> <tt id="link-58" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-58', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">subcommand</tt><tt class="py-op">==</tt><tt class="py-string">'pic'</tt><tt class="py-op">:</tt> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt id="link-59" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-59', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">subcommand</tt><tt class="py-op">==</tt><tt class="py-string">'pic'</tt><tt class="py-op">:</tt> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt id="link-60" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-60', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">npz_file</tt> <tt class="py-op">==</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line">                <tt class="py-keyword">raise</tt> <tt id="link-61" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-61', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-62" class="py-name"><a title="code.common.exceptions.StupidityError" class="py-name" href="#" onclick="return doclink('link-62', 'StupidityError', 'link-31');">StupidityError</a></tt><tt class="py-op">(</tt><tt class="py-string">'No npz_file is specified.'</tt><tt class="py-op">)</tt> </tt>
<a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line">            <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line">                <tt class="py-name">npz_file_path</tt><tt class="py-op">=</tt><tt id="link-63" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-63', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">npz_file</tt> </tt>
<a name="L96"></a><tt class="py-lineno"> 96</tt>  <tt class="py-line">            <tt class="py-name">picture_directory_path</tt><tt class="py-op">=</tt><tt id="link-64" class="py-name" targets="Function code.innerproduct.script.initialize_picture_directory()=code.innerproduct.script-module.html#initialize_picture_directory"><a title="code.innerproduct.script.initialize_picture_directory" class="py-name" href="#" onclick="return doclink('link-64', 'initialize_picture_directory', 'link-64');">initialize_picture_directory</a></tt><tt class="py-op">(</tt> </tt>
<a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line">                <tt class="py-name">npz_file_path</tt><tt class="py-op">=</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">,</tt>  </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line">                <tt class="py-name">picture_directory_name</tt><tt class="py-op">=</tt><tt id="link-65" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-65', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">picture_directory_name</tt><tt class="py-op">,</tt>  </tt>
<a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line">                <tt class="py-name">new_picture_directory</tt><tt class="py-op">=</tt><tt id="link-66" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-66', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">new_save_directory</tt><tt class="py-op">)</tt> </tt>
<a name="L100"></a><tt class="py-lineno">100</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt id="link-67" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-67', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">subcommand</tt><tt class="py-op">==</tt><tt class="py-string">'run'</tt><tt class="py-op">:</tt> </tt>
<a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line">            <tt class="py-name">picture_directory_path</tt><tt class="py-op">=</tt><tt id="link-68" class="py-name"><a title="code.innerproduct.script.initialize_picture_directory" class="py-name" href="#" onclick="return doclink('link-68', 'initialize_picture_directory', 'link-64');">initialize_picture_directory</a></tt><tt class="py-op">(</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line">                <tt class="py-name">npz_file_path</tt><tt class="py-op">=</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">,</tt>  </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line">                <tt class="py-name">picture_directory_name</tt><tt class="py-op">=</tt><tt id="link-69" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-69', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">picture_directory_name</tt><tt class="py-op">,</tt>  </tt>
<a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line">                <tt class="py-name">new_picture_directory</tt><tt class="py-op">=</tt><tt class="py-name">True</tt><tt class="py-op">)</tt> </tt>
<a name="L105"></a><tt class="py-lineno">105</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt id="link-70" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-70', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_range</tt><tt class="py-op">==</tt><tt class="py-name">None</tt> <tt class="py-keyword">and</tt> <tt id="link-71" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-71', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_keyword</tt><tt class="py-op">==</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line">            <tt class="py-name">limit</tt><tt class="py-op">=</tt><tt class="py-string">'non_auto'</tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt id="link-72" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-72', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_range</tt><tt class="py-op">!=</tt><tt class="py-name">None</tt> <tt class="py-keyword">and</tt> <tt id="link-73" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-73', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_keyword</tt><tt class="py-op">==</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line">            <tt class="py-name">limit</tt><tt class="py-op">=</tt><tt class="py-name">eval</tt><tt class="py-op">(</tt><tt id="link-74" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-74', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_range</tt><tt class="py-op">)</tt> </tt>
<a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line">        <tt class="py-keyword">elif</tt> <tt id="link-75" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-75', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_keyword</tt><tt class="py-op">!=</tt><tt class="py-name">None</tt> <tt class="py-keyword">and</tt> <tt id="link-76" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-76', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_range</tt><tt class="py-op">==</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L110"></a><tt class="py-lineno">110</tt>  <tt class="py-line">            <tt class="py-keyword">if</tt> <tt id="link-77" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-77', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_keyword</tt><tt class="py-op">==</tt><tt class="py-string">'all'</tt><tt class="py-op">:</tt> </tt>
<a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line">                <tt class="py-name">limit</tt><tt class="py-op">=</tt><tt class="py-op">(</tt><tt class="py-op">-</tt><tt class="py-number">1</tt><tt class="py-op">,</tt><tt class="py-number">1</tt><tt class="py-op">)</tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line">            <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line">                <tt class="py-name">limit</tt><tt class="py-op">=</tt><tt id="link-78" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-78', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">limit_keyword</tt> </tt>
<a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line">            <tt class="py-keyword">raise</tt> <tt id="link-79" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-79', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-80" class="py-name" targets="Class code.common.exceptions.IdenticalStateElectronBug=code.common.exceptions.IdenticalStateElectronBug-class.html"><a title="code.common.exceptions.IdenticalStateElectronBug" class="py-name" href="#" onclick="return doclink('link-80', 'IdenticalStateElectronBug', 'link-80');">IdenticalStateElectronBug</a></tt><tt class="py-op">(</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line">                <tt class="py-string">'Both limit_keyword and limit_range have been passed through'</tt>  </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">' argparse, despite them being mutually exclusive.'</tt><tt class="py-op">)</tt> </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line">        <tt id="link-81" class="py-name" targets="Function code.innerproduct.script.run_similaritydrawer()=code.innerproduct.script-module.html#run_similaritydrawer"><a title="code.innerproduct.script.run_similaritydrawer" class="py-name" href="#" onclick="return doclink('link-81', 'run_similaritydrawer', 'link-81');">run_similaritydrawer</a></tt><tt class="py-op">(</tt> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line">            <tt class="py-name">npz_file_path</tt><tt class="py-op">=</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">,</tt>  </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line">            <tt class="py-name">picture_directory_path</tt><tt class="py-op">=</tt><tt class="py-name">picture_directory_path</tt><tt class="py-op">,</tt>  </tt>
<a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line">            <tt class="py-name">non_columns</tt><tt class="py-op">=</tt><tt id="link-82" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-82', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">non_columns</tt><tt class="py-op">,</tt> <tt id="link-83" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-83', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">=</tt><tt id="link-84" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-84', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-85" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-85', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">,</tt>  </tt>
<a name="L122"></a><tt class="py-lineno">122</tt>  <tt class="py-line">            <tt id="link-86" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-86', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">=</tt><tt id="link-87" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-87', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt id="link-88" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-88', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">,</tt> <tt class="py-name">cut_nons</tt><tt class="py-op">=</tt><tt id="link-89" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-89', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">cut_nons</tt><tt class="py-op">,</tt>  </tt>
<a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line">            <tt class="py-name">limit</tt><tt class="py-op">=</tt><tt class="py-name">limit</tt><tt class="py-op">,</tt>  </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line">            <tt class="py-name">column_vs_column</tt><tt class="py-op">=</tt><tt id="link-90" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-90', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">column_vs_column</tt><tt class="py-op">,</tt> <tt class="py-name">row_vs_row</tt><tt class="py-op">=</tt><tt id="link-91" class="py-name"><a title="code.common_mode.script.args
code.ellipsesdrawer.script.args
code.outanalyzer.script.args
code.powerspectrum.script.args
code.stepdetector.script.args" class="py-name" href="#" onclick="return doclink('link-91', 'args', 'link-21');">args</a></tt><tt class="py-op">.</tt><tt class="py-name">row_vs_row</tt><tt class="py-op">)</tt> </tt>
</div><a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line"> </tt>
<a name="L126"></a><tt class="py-lineno">126</tt>  <tt class="py-line"> </tt>
<a name="get_base_parser"></a><div id="get_base_parser-def"><a name="L127"></a><tt class="py-lineno">127</tt> <a class="py-toggle" href="#" id="get_base_parser-toggle" onclick="return toggle('get_base_parser');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#get_base_parser">get_base_parser</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="get_base_parser-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="get_base_parser-expanded"><a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Gets the base parser.  </tt> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line"><tt class="py-docstring">    @return: the base parser. The base parser has all the arguments that is</tt> </tt>
<a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line"><tt class="py-docstring">    common to all subcommands.</tt> </tt>
<a name="L131"></a><tt class="py-lineno">131</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: argparse.ArgumentParser.'''</tt> </tt>
<a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line">    <tt class="py-name">base_parser</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentParser</tt><tt class="py-op">(</tt><tt class="py-name">add_help</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">)</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line">    <tt class="py-name">base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line">        <tt class="py-string">'-nsd'</tt><tt class="py-op">,</tt> <tt class="py-string">'--new_save_directory'</tt><tt class="py-op">,</tt> <tt class="py-name">action</tt><tt class="py-op">=</tt><tt class="py-string">'store_true'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">,</tt>  </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'If an old directory with the same name as the save directory '</tt>  </tt>
<a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'exists, keep it and create a new directory to keep the new data.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L137"></a><tt class="py-lineno">137</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'new_save_directory'</tt><tt class="py-op">)</tt> </tt>
<a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">    <tt class="py-name">base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt><tt class="py-string">'-nc'</tt><tt class="py-op">,</tt> <tt class="py-string">'--non_columns'</tt><tt class="py-op">,</tt> <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'*'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line">                             <tt id="link-92" class="py-name" targets="Variable code.stepdetector.stepanalyzer.Transition.type=code.stepdetector.stepanalyzer.Transition-class.html#type"><a title="code.stepdetector.stepanalyzer.Transition.type" class="py-name" href="#" onclick="return doclink('link-92', 'type', 'link-92');">type</a></tt><tt class="py-op">=</tt><tt class="py-name">int</tt><tt class="py-op">,</tt> <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'the columns to be ignored.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line">                             <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'non_columns'</tt><tt class="py-op">)</tt> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line">    <tt class="py-name">base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt><tt class="py-string">'-nr'</tt><tt class="py-op">,</tt> <tt class="py-string">'--non_rows'</tt><tt class="py-op">,</tt> <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'*'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line">                             <tt id="link-93" class="py-name"><a title="code.stepdetector.stepanalyzer.Transition.type" class="py-name" href="#" onclick="return doclink('link-93', 'type', 'link-92');">type</a></tt><tt class="py-op">=</tt><tt class="py-name">int</tt><tt class="py-op">,</tt> <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'the rows to be ignored.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">                             <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'non_rows'</tt><tt class="py-op">)</tt> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line">    <tt class="py-name">base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt><tt class="py-string">'-nd'</tt><tt class="py-op">,</tt> <tt class="py-string">'--non_detectors'</tt><tt class="py-op">,</tt> <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'*'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line">                             <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'individual detectors to be ignored.'</tt>  </tt>
<a name="L146"></a><tt class="py-lineno">146</tt>  <tt class="py-line">                             <tt class="py-op">+</tt> <tt class="py-string">' Detectors are represented as (column, row)*.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">                             <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'non_detectors'</tt><tt class="py-op">)</tt> </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">base_parser</tt> </tt>
</div><a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line"> </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line"> </tt>
<a name="get_npz_base_parser"></a><div id="get_npz_base_parser-def"><a name="L151"></a><tt class="py-lineno">151</tt> <a class="py-toggle" href="#" id="get_npz_base_parser-toggle" onclick="return toggle('get_npz_base_parser');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#get_npz_base_parser">get_npz_base_parser</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="get_npz_base_parser-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="get_npz_base_parser-expanded"><a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Gets the npz-base parser.</tt> </tt>
<a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line"><tt class="py-docstring">    @return: the npz-base parser. The npz-base parser has all the arguments</tt> </tt>
<a name="L154"></a><tt class="py-lineno">154</tt>  <tt class="py-line"><tt class="py-docstring">    that is common to all both the run subcommand and the npz subcommand.</tt> </tt>
<a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: argparse.ArgumentParser.'''</tt> </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line">    <tt class="py-name">npz_base_parser</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentParser</tt><tt class="py-op">(</tt><tt class="py-name">add_help</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">)</tt> </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line">    <tt class="py-name">npz_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line">        <tt class="py-string">'mce_file'</tt><tt class="py-op">,</tt> <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'?'</tt><tt class="py-op">,</tt>  </tt>
<a name="L159"></a><tt class="py-lineno">159</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'the file where the mce data will be read from.'</tt>  </tt>
<a name="L160"></a><tt class="py-lineno">160</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'This file is read with mce_data.SmallMCEFile. Read function.'</tt><tt class="py-op">)</tt> </tt>
<a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line">    <tt class="py-name">npz_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line">        <tt class="py-string">'-dsl'</tt><tt class="py-op">,</tt> <tt class="py-string">'--directory_save_location'</tt><tt class="py-op">,</tt> </tt>
<a name="L163"></a><tt class="py-lineno">163</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'The location to place the save directory. If None, '</tt>  </tt>
<a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'the save directory will be placed in the same directory '</tt> </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'as the mce_file.'</tt> <tt class="py-op">,</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line">        <tt class="py-name">dest</tt> <tt class="py-op">=</tt> <tt class="py-string">'directory_save_location'</tt><tt class="py-op">)</tt> </tt>
<a name="L167"></a><tt class="py-lineno">167</tt>  <tt class="py-line">    <tt class="py-name">npz_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line">        <tt class="py-string">'-sdn'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-string">'stuff'</tt><tt class="py-op">,</tt>  </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'the tag of the directory where the analysis will be saved.'</tt> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">' This tag will be appended to a generated name to create'</tt> </tt>
<a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">' the name of the save directory.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L172"></a><tt class="py-lineno">172</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'save_directory_name'</tt><tt class="py-op">)</tt> </tt>
<a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line">    <tt class="py-name">npz_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line">        <tt class="py-string">'-flp'</tt><tt class="py-op">,</tt> <tt class="py-string">'--flipper'</tt><tt class="py-op">,</tt>  </tt>
<a name="L175"></a><tt class="py-lineno">175</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'Indicates how the columns should be flipped. '</tt>  </tt>
<a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'The column is the second dimension. The input is to be a tuple '</tt>  </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'with length equal to the number of columns. '</tt> </tt>
<a name="L178"></a><tt class="py-lineno">178</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'1 means not flipped, while -1 means flipped.'</tt><tt class="py-op">,</tt> </tt>
<a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line">        <tt class="py-name">dest</tt> <tt class="py-op">=</tt> <tt class="py-string">'flipper'</tt><tt class="py-op">)</tt> </tt>
<a name="L180"></a><tt class="py-lineno">180</tt>  <tt class="py-line">    <tt class="py-name">sum_filter_group</tt><tt class="py-op">=</tt><tt class="py-name">npz_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_mutually_exclusive_group</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line">    <tt class="py-name">sum_filter_group</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L182"></a><tt class="py-lineno">182</tt>  <tt class="py-line">        <tt class="py-string">'-af'</tt><tt class="py-op">,</tt> <tt class="py-name">action</tt><tt class="py-op">=</tt><tt class="py-string">'store_true'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">,</tt>  </tt>
<a name="L183"></a><tt class="py-lineno">183</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'filters out the sum of all the timestreams.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L184"></a><tt class="py-lineno">184</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'array_sum_filter'</tt><tt class="py-op">)</tt> </tt>
<a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line">    <tt class="py-name">sum_filter_group</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line">        <tt class="py-string">'-rf'</tt><tt class="py-op">,</tt> <tt class="py-name">action</tt><tt class="py-op">=</tt><tt class="py-string">'store_true'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">,</tt>  </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'for each row of data, filters out the sum of that row.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L188"></a><tt class="py-lineno">188</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'row_filter'</tt><tt class="py-op">)</tt> </tt>
<a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line">    <tt class="py-name">sum_filter_group</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line">        <tt class="py-string">'-cf'</tt><tt class="py-op">,</tt> <tt class="py-name">action</tt><tt class="py-op">=</tt><tt class="py-string">'store_true'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">,</tt>  </tt>
<a name="L191"></a><tt class="py-lineno">191</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'for each column of data, filters out the sum of that column.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L192"></a><tt class="py-lineno">192</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'column_filter'</tt><tt class="py-op">)</tt> </tt>
<a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">npz_base_parser</tt> </tt>
</div><a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line"> </tt>
<a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line"> </tt>
<a name="get_pic_base_parser"></a><div id="get_pic_base_parser-def"><a name="L196"></a><tt class="py-lineno">196</tt> <a class="py-toggle" href="#" id="get_pic_base_parser-toggle" onclick="return toggle('get_pic_base_parser');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#get_pic_base_parser">get_pic_base_parser</a><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="get_pic_base_parser-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="get_pic_base_parser-expanded"><a name="L197"></a><tt class="py-lineno">197</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Gets the pic-base parser.</tt> </tt>
<a name="L198"></a><tt class="py-lineno">198</tt>  <tt class="py-line"><tt class="py-docstring">    @return: the pic-base parser. The pic-base parser has all the arguments</tt> </tt>
<a name="L199"></a><tt class="py-lineno">199</tt>  <tt class="py-line"><tt class="py-docstring">    that is common to all both the run subcommand and the pic subcommand.</tt> </tt>
<a name="L200"></a><tt class="py-lineno">200</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: argparse.ArgumentParser.'''</tt> </tt>
<a name="L201"></a><tt class="py-lineno">201</tt>  <tt class="py-line">    <tt class="py-name">pic_base_parser</tt><tt class="py-op">=</tt><tt class="py-name">argparse</tt><tt class="py-op">.</tt><tt class="py-name">ArgumentParser</tt><tt class="py-op">(</tt><tt class="py-name">add_help</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">)</tt> </tt>
<a name="L202"></a><tt class="py-lineno">202</tt>  <tt class="py-line">    <tt class="py-name">pic_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L203"></a><tt class="py-lineno">203</tt>  <tt class="py-line">        <tt class="py-string">'-pdn'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-string">'drawings'</tt><tt class="py-op">,</tt>  </tt>
<a name="L204"></a><tt class="py-lineno">204</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'the tag of the directory where the pictures will be saved.'</tt> </tt>
<a name="L205"></a><tt class="py-lineno">205</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'This tag will be appended to a generated name to create'</tt> </tt>
<a name="L206"></a><tt class="py-lineno">206</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">' the name of the save directory.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L207"></a><tt class="py-lineno">207</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'picture_directory_name'</tt><tt class="py-op">)</tt> </tt>
<a name="L208"></a><tt class="py-lineno">208</tt>  <tt class="py-line">    <tt class="py-name">pic_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L209"></a><tt class="py-lineno">209</tt>  <tt class="py-line">        <tt class="py-string">'-cn'</tt><tt class="py-op">,</tt> <tt class="py-name">action</tt><tt class="py-op">=</tt><tt class="py-string">'store_true'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">False</tt><tt class="py-op">,</tt>  </tt>
<a name="L210"></a><tt class="py-lineno">210</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">'cut out the non_rows and non_columns so they are not shown.'</tt>  </tt>
<a name="L211"></a><tt class="py-lineno">211</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">' Normally, they are shown as white.'</tt><tt class="py-op">,</tt>  </tt>
<a name="L212"></a><tt class="py-lineno">212</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'cut_nons'</tt><tt class="py-op">)</tt> </tt>
<a name="L213"></a><tt class="py-lineno">213</tt>  <tt class="py-line">    <tt class="py-name">pic_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L214"></a><tt class="py-lineno">214</tt>  <tt class="py-line">        <tt class="py-string">'-cvc'</tt><tt class="py-op">,</tt> <tt class="py-string">'--column_vs_column'</tt><tt class="py-op">,</tt> <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'*'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> </tt>
<a name="L215"></a><tt class="py-lineno">215</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'Plot the pointwise product of all rows in a column vs all '</tt> </tt>
<a name="L216"></a><tt class="py-lineno">216</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'rows in another column. The two columns are specified with (x, y).'</tt><tt class="py-op">,</tt> </tt>
<a name="L217"></a><tt class="py-lineno">217</tt>  <tt class="py-line">        <tt class="py-name">dest</tt> <tt class="py-op">=</tt> <tt class="py-string">'column_vs_column'</tt><tt class="py-op">)</tt> </tt>
<a name="L218"></a><tt class="py-lineno">218</tt>  <tt class="py-line">    <tt class="py-name">pic_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L219"></a><tt class="py-lineno">219</tt>  <tt class="py-line">        <tt class="py-string">'-rvr'</tt><tt class="py-op">,</tt> <tt class="py-string">'--row_vs_row'</tt><tt class="py-op">,</tt> <tt class="py-name">nargs</tt><tt class="py-op">=</tt><tt class="py-string">'*'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L220"></a><tt class="py-lineno">220</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'Plot the pointwise product of all columns in a row vs all '</tt>  </tt>
<a name="L221"></a><tt class="py-lineno">221</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'columns in another row. The two rows are specified with (x, y).'</tt><tt class="py-op">,</tt> </tt>
<a name="L222"></a><tt class="py-lineno">222</tt>  <tt class="py-line">        <tt class="py-name">dest</tt> <tt class="py-op">=</tt> <tt class="py-string">'row_vs_row'</tt><tt class="py-op">)</tt> </tt>
<a name="L223"></a><tt class="py-lineno">223</tt>  <tt class="py-line">    <tt class="py-name">limit_group</tt><tt class="py-op">=</tt><tt class="py-name">pic_base_parser</tt><tt class="py-op">.</tt><tt class="py-name">add_mutually_exclusive_group</tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L224"></a><tt class="py-lineno">224</tt>  <tt class="py-line">    <tt class="py-name">limit_group</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L225"></a><tt class="py-lineno">225</tt>  <tt class="py-line">        <tt class="py-string">'-lr'</tt><tt class="py-op">,</tt> <tt class="py-string">'--limit_range'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">None</tt><tt class="py-op">,</tt>  </tt>
<a name="L226"></a><tt class="py-lineno">226</tt>  <tt class="py-line">        <tt class="py-name">help</tt> <tt class="py-op">=</tt> <tt class="py-string">'Limit the data. '</tt>  </tt>
<a name="L227"></a><tt class="py-lineno">227</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">'Plot everything outside of the limit as if they are at the limit.'</tt>  </tt>
<a name="L228"></a><tt class="py-lineno">228</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">' If (x,y) is entered, the data will be limited to (x,y).'</tt><tt class="py-op">,</tt>  </tt>
<a name="L229"></a><tt class="py-lineno">229</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'limit_range'</tt><tt class="py-op">)</tt> </tt>
<a name="L230"></a><tt class="py-lineno">230</tt>  <tt class="py-line">    <tt class="py-name">limit_group</tt><tt class="py-op">.</tt><tt class="py-name">add_argument</tt><tt class="py-op">(</tt> </tt>
<a name="L231"></a><tt class="py-lineno">231</tt>  <tt class="py-line">        <tt class="py-string">'-lk'</tt><tt class="py-op">,</tt> <tt class="py-string">'--limit_keyword'</tt><tt class="py-op">,</tt> <tt class="py-name">default</tt><tt class="py-op">=</tt><tt class="py-name">None</tt><tt class="py-op">,</tt>  </tt>
<a name="L232"></a><tt class="py-lineno">232</tt>  <tt class="py-line">        <tt class="py-name">choices</tt><tt class="py-op">=</tt><tt class="py-op">[</tt><tt class="py-string">'non_auto'</tt><tt class="py-op">,</tt> <tt class="py-string">'full'</tt><tt class="py-op">,</tt> <tt class="py-string">'all'</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L233"></a><tt class="py-lineno">233</tt>  <tt class="py-line">        <tt class="py-name">help</tt><tt class="py-op">=</tt><tt class="py-string">"Limit the data. "</tt> <tt class="py-op">+</tt>  </tt>
<a name="L234"></a><tt class="py-lineno">234</tt>  <tt class="py-line">        <tt class="py-string">"Plot everything outside of the limit as if they are at the limit. "</tt>  </tt>
<a name="L235"></a><tt class="py-lineno">235</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">"non_auto: set the limit to min and max of data, ignoring diagonal;"</tt>  </tt>
<a name="L236"></a><tt class="py-lineno">236</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">" full:set the limit to min and max of data;"</tt>  </tt>
<a name="L237"></a><tt class="py-lineno">237</tt>  <tt class="py-line">        <tt class="py-op">+</tt> <tt class="py-string">" all:set the limit to (-1,1)"</tt><tt class="py-op">,</tt>  </tt>
<a name="L238"></a><tt class="py-lineno">238</tt>  <tt class="py-line">        <tt class="py-name">dest</tt><tt class="py-op">=</tt><tt class="py-string">'limit_keyword'</tt><tt class="py-op">)</tt> </tt>
<a name="L239"></a><tt class="py-lineno">239</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">pic_base_parser</tt> </tt>
</div><a name="L240"></a><tt class="py-lineno">240</tt>  <tt class="py-line"> </tt>
<a name="L241"></a><tt class="py-lineno">241</tt>  <tt class="py-line"> </tt>
<a name="initialize_data_save_directory"></a><div id="initialize_data_save_directory-def"><a name="L242"></a><tt class="py-lineno">242</tt> <a class="py-toggle" href="#" id="initialize_data_save_directory-toggle" onclick="return toggle('initialize_data_save_directory');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#initialize_data_save_directory">initialize_data_save_directory</a><tt class="py-op">(</tt><tt class="py-param">save_directory_name</tt><tt class="py-op">,</tt> <tt class="py-param">mce_file</tt><tt class="py-op">,</tt>  </tt>
<a name="L243"></a><tt class="py-lineno">243</tt>  <tt class="py-line">                                   <tt class="py-param">new_save_directory</tt><tt class="py-op">,</tt> <tt class="py-param">sum_filter</tt><tt class="py-op">,</tt>  </tt>
<a name="L244"></a><tt class="py-lineno">244</tt>  <tt class="py-line">                                   <tt class="py-param">directory_save_location</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="initialize_data_save_directory-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="initialize_data_save_directory-expanded"><a name="L245"></a><tt class="py-lineno">245</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Sets up data save directory for a mce_file,</tt> </tt>
<a name="L246"></a><tt class="py-lineno">246</tt>  <tt class="py-line"><tt class="py-docstring">    the overall save directory for the npz file, and possibly the drawing</tt> </tt>
<a name="L247"></a><tt class="py-lineno">247</tt>  <tt class="py-line"><tt class="py-docstring">    folders. This function is used in the run and npz subcommand. The name</tt> </tt>
<a name="L248"></a><tt class="py-lineno">248</tt>  <tt class="py-line"><tt class="py-docstring">    proper (without the directory path) of the file will be the name proper of</tt> </tt>
<a name="L249"></a><tt class="py-lineno">249</tt>  <tt class="py-line"><tt class="py-docstring">    the mce_file with sum_filter and save_directory_name appended.</tt> </tt>
<a name="L250"></a><tt class="py-lineno">250</tt>  <tt class="py-line"><tt class="py-docstring">    @return: the whole path of the data save directory.</tt> </tt>
<a name="L251"></a><tt class="py-lineno">251</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: str</tt> </tt>
<a name="L252"></a><tt class="py-lineno">252</tt>  <tt class="py-line"><tt class="py-docstring">    @param save_directory_name: a suffix to the data save directory</tt> </tt>
<a name="L253"></a><tt class="py-lineno">253</tt>  <tt class="py-line"><tt class="py-docstring">    @type save_directory_name: str</tt> </tt>
<a name="L254"></a><tt class="py-lineno">254</tt>  <tt class="py-line"><tt class="py-docstring">    @param mce_file: The whole path of the mce_file that the data save</tt> </tt>
<a name="L255"></a><tt class="py-lineno">255</tt>  <tt class="py-line"><tt class="py-docstring">    directory is for.</tt> </tt>
<a name="L256"></a><tt class="py-lineno">256</tt>  <tt class="py-line"><tt class="py-docstring">    @type mce_file: str </tt> </tt>
<a name="L257"></a><tt class="py-lineno">257</tt>  <tt class="py-line"><tt class="py-docstring">    @param new_save_directory: indicates whether or not a new directory is to</tt> </tt>
<a name="L258"></a><tt class="py-lineno">258</tt>  <tt class="py-line"><tt class="py-docstring">    be created if there is already one with the same name. If False, the</tt> </tt>
<a name="L259"></a><tt class="py-lineno">259</tt>  <tt class="py-line"><tt class="py-docstring">    current directory will be deleted.</tt> </tt>
<a name="L260"></a><tt class="py-lineno">260</tt>  <tt class="py-line"><tt class="py-docstring">    @type new_save_directory: boolean</tt> </tt>
<a name="L261"></a><tt class="py-lineno">261</tt>  <tt class="py-line"><tt class="py-docstring">    @param sum_filter: indicates how the data was filtered by</tt> </tt>
<a name="L262"></a><tt class="py-lineno">262</tt>  <tt class="py-line"><tt class="py-docstring">    PointwiseProduct. This information is appended to the name of the</tt> </tt>
<a name="L263"></a><tt class="py-lineno">263</tt>  <tt class="py-line"><tt class="py-docstring">    directory.</tt> </tt>
<a name="L264"></a><tt class="py-lineno">264</tt>  <tt class="py-line"><tt class="py-docstring">    @type sum_filter: str</tt> </tt>
<a name="L265"></a><tt class="py-lineno">265</tt>  <tt class="py-line"><tt class="py-docstring">    @param directory_save_location: the directory in which the data save</tt> </tt>
<a name="L266"></a><tt class="py-lineno">266</tt>  <tt class="py-line"><tt class="py-docstring">    directory is to be saved in. If None, the data save directory will be saved</tt> </tt>
<a name="L267"></a><tt class="py-lineno">267</tt>  <tt class="py-line"><tt class="py-docstring">    in the same directory as the mce file.</tt> </tt>
<a name="L268"></a><tt class="py-lineno">268</tt>  <tt class="py-line"><tt class="py-docstring">    @type directory_save_location: str '''</tt> </tt>
<a name="L269"></a><tt class="py-lineno">269</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">mce_file</tt><tt class="py-op">)</tt><tt class="py-op">==</tt><tt class="py-name">False</tt><tt class="py-op">:</tt> </tt>
<a name="L270"></a><tt class="py-lineno">270</tt>  <tt class="py-line">        <tt class="py-keyword">raise</tt> <tt class="py-name">ValueError</tt><tt class="py-op">(</tt><tt class="py-string">'The specified mce_file does not exist'</tt><tt class="py-op">)</tt> </tt>
<a name="L271"></a><tt class="py-lineno">271</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt class="py-name">directory_save_location</tt><tt class="py-op">==</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L272"></a><tt class="py-lineno">272</tt>  <tt class="py-line">        <tt class="py-name">save_directory_prefix</tt><tt class="py-op">=</tt><tt class="py-name">mce_file</tt> </tt>
<a name="L273"></a><tt class="py-lineno">273</tt>  <tt class="py-line">    <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L274"></a><tt class="py-lineno">274</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">directory_save_location</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L275"></a><tt class="py-lineno">275</tt>  <tt class="py-line">            <tt class="py-name">save_directory_prefix</tt> <tt class="py-op">=</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">join</tt><tt class="py-op">(</tt><tt class="py-name">directory_save_location</tt><tt class="py-op">,</tt> </tt>
<a name="L276"></a><tt class="py-lineno">276</tt>  <tt class="py-line">                                                 <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">split</tt><tt class="py-op">(</tt><tt class="py-name">mce_file</tt><tt class="py-op">)</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L277"></a><tt class="py-lineno">277</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L278"></a><tt class="py-lineno">278</tt>  <tt class="py-line">            <tt class="py-keyword">raise</tt> <tt class="py-name">ValueError</tt><tt class="py-op">(</tt><tt class="py-string">'The directory_save_location does not exist'</tt><tt class="py-op">)</tt> </tt>
<a name="L279"></a><tt class="py-lineno">279</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt id="link-94" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-94', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">!=</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L280"></a><tt class="py-lineno">280</tt>  <tt class="py-line">        <tt class="py-name">save_directory_path</tt><tt class="py-op">=</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_prefix</tt> <tt class="py-op">+</tt> <tt class="py-string">'_'</tt> <tt class="py-op">+</tt> <tt id="link-95" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-95', 'sum_filter', 'link-33');">sum_filter</a></tt>  </tt>
<a name="L281"></a><tt class="py-lineno">281</tt>  <tt class="py-line">                             <tt class="py-op">+</tt> <tt class="py-string">'_filtered_'</tt> <tt class="py-op">+</tt> <tt class="py-name">save_directory_name</tt><tt class="py-op">)</tt> </tt>
<a name="L282"></a><tt class="py-lineno">282</tt>  <tt class="py-line">    <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L283"></a><tt class="py-lineno">283</tt>  <tt class="py-line">        <tt class="py-name">save_directory_path</tt><tt class="py-op">=</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_prefix</tt> <tt class="py-op">+</tt> <tt class="py-string">'_unfiltered_'</tt>  </tt>
<a name="L284"></a><tt class="py-lineno">284</tt>  <tt class="py-line">                             <tt class="py-op">+</tt> <tt class="py-name">save_directory_name</tt><tt class="py-op">)</tt> </tt>
<a name="L285"></a><tt class="py-lineno">285</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt class="py-name">new_save_directory</tt><tt class="py-op">:</tt> </tt>
<a name="L286"></a><tt class="py-lineno">286</tt>  <tt class="py-line">        <tt class="py-name">original_save_directory_path</tt><tt class="py-op">=</tt><tt class="py-name">save_directory_path</tt> </tt>
<a name="L287"></a><tt class="py-lineno">287</tt>  <tt class="py-line">        <tt class="py-name">copy_number</tt><tt class="py-op">=</tt><tt class="py-number">1</tt> </tt>
<a name="L288"></a><tt class="py-lineno">288</tt>  <tt class="py-line">        <tt class="py-keyword">while</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_path</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L289"></a><tt class="py-lineno">289</tt>  <tt class="py-line">            <tt class="py-name">copy_number</tt><tt class="py-op">+=</tt><tt class="py-number">1</tt> </tt>
<a name="L290"></a><tt class="py-lineno">290</tt>  <tt class="py-line">            <tt class="py-name">save_directory_path</tt><tt class="py-op">=</tt><tt class="py-op">(</tt><tt class="py-name">original_save_directory_path</tt>  </tt>
<a name="L291"></a><tt class="py-lineno">291</tt>  <tt class="py-line">                                 <tt class="py-op">+</tt> <tt class="py-string">'_copy('</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">copy_number</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-string">')'</tt><tt class="py-op">)</tt> </tt>
<a name="L292"></a><tt class="py-lineno">292</tt>  <tt class="py-line">    <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L293"></a><tt class="py-lineno">293</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_path</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L294"></a><tt class="py-lineno">294</tt>  <tt class="py-line">            <tt class="py-name">shutil</tt><tt class="py-op">.</tt><tt class="py-name">rmtree</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_path</tt><tt class="py-op">)</tt> </tt>
<a name="L295"></a><tt class="py-lineno">295</tt>  <tt class="py-line">    <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">mkdir</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_path</tt><tt class="py-op">)</tt> </tt>
<a name="L296"></a><tt class="py-lineno">296</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">save_directory_path</tt> </tt>
</div><a name="L297"></a><tt class="py-lineno">297</tt>  <tt class="py-line"> </tt>
<a name="L298"></a><tt class="py-lineno">298</tt>  <tt class="py-line"> </tt>
<a name="initialize_picture_directory"></a><div id="initialize_picture_directory-def"><a name="L299"></a><tt class="py-lineno">299</tt> <a class="py-toggle" href="#" id="initialize_picture_directory-toggle" onclick="return toggle('initialize_picture_directory');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#initialize_picture_directory">initialize_picture_directory</a><tt class="py-op">(</tt><tt class="py-param">npz_file_path</tt><tt class="py-op">,</tt> <tt class="py-param">picture_directory_name</tt><tt class="py-op">,</tt>  </tt>
<a name="L300"></a><tt class="py-lineno">300</tt>  <tt class="py-line">                                 <tt class="py-param">new_picture_directory</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="initialize_picture_directory-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="initialize_picture_directory-expanded"><a name="L301"></a><tt class="py-lineno">301</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Sets up the directory for the pictures.</tt> </tt>
<a name="L302"></a><tt class="py-lineno">302</tt>  <tt class="py-line"><tt class="py-docstring">    @return: the whole path of the picture directory.</tt> </tt>
<a name="L303"></a><tt class="py-lineno">303</tt>  <tt class="py-line"><tt class="py-docstring">    @rtype: str    </tt> </tt>
<a name="L304"></a><tt class="py-lineno">304</tt>  <tt class="py-line"><tt class="py-docstring">    @param npz_file_path: the whole path of the npz file from which the</tt> </tt>
<a name="L305"></a><tt class="py-lineno">305</tt>  <tt class="py-line"><tt class="py-docstring">    pictures will be drawn. The picture directory will be placed in the save</tt> </tt>
<a name="L306"></a><tt class="py-lineno">306</tt>  <tt class="py-line"><tt class="py-docstring">    directory as the npz_file_path.</tt> </tt>
<a name="L307"></a><tt class="py-lineno">307</tt>  <tt class="py-line"><tt class="py-docstring">    @type npz_file_path: str</tt> </tt>
<a name="L308"></a><tt class="py-lineno">308</tt>  <tt class="py-line"><tt class="py-docstring">    @param picture_directory_name: The name proper (without the directory path)</tt> </tt>
<a name="L309"></a><tt class="py-lineno">309</tt>  <tt class="py-line"><tt class="py-docstring">    of the directory for the pictures.</tt> </tt>
<a name="L310"></a><tt class="py-lineno">310</tt>  <tt class="py-line"><tt class="py-docstring">    @type picture_directory_name: str</tt> </tt>
<a name="L311"></a><tt class="py-lineno">311</tt>  <tt class="py-line"><tt class="py-docstring">    @param new_picture_directory: indicates whether or not a new directory is</tt> </tt>
<a name="L312"></a><tt class="py-lineno">312</tt>  <tt class="py-line"><tt class="py-docstring">    to be created if there is already one with the same name. If False, the</tt> </tt>
<a name="L313"></a><tt class="py-lineno">313</tt>  <tt class="py-line"><tt class="py-docstring">    current directory will be deleted.</tt> </tt>
<a name="L314"></a><tt class="py-lineno">314</tt>  <tt class="py-line"><tt class="py-docstring">    @type new_picture_directory: boolean '''</tt> </tt>
<a name="L315"></a><tt class="py-lineno">315</tt>  <tt class="py-line">    <tt class="py-name">picture_directory_path</tt><tt class="py-op">=</tt><tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">join</tt><tt class="py-op">(</tt><tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">dirname</tt><tt class="py-op">(</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> </tt>
<a name="L316"></a><tt class="py-lineno">316</tt>  <tt class="py-line">                                        <tt class="py-name">picture_directory_name</tt><tt class="py-op">)</tt> </tt>
<a name="L317"></a><tt class="py-lineno">317</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">)</tt><tt class="py-op">==</tt><tt class="py-name">False</tt><tt class="py-op">:</tt> </tt>
<a name="L318"></a><tt class="py-lineno">318</tt>  <tt class="py-line">        <tt class="py-keyword">raise</tt> <tt class="py-name">ValueError</tt><tt class="py-op">(</tt><tt class="py-string">'The specified mce_file does not exist'</tt><tt class="py-op">)</tt> </tt>
<a name="L319"></a><tt class="py-lineno">319</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt><tt class="py-op">)</tt><tt class="py-op">==</tt><tt class="py-name">True</tt><tt class="py-op">:</tt> </tt>
<a name="L320"></a><tt class="py-lineno">320</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">new_picture_directory</tt><tt class="py-op">:</tt> </tt>
<a name="L321"></a><tt class="py-lineno">321</tt>  <tt class="py-line">            <tt class="py-name">original_picture_directory_path</tt><tt class="py-op">=</tt><tt class="py-name">picture_directory_path</tt> </tt>
<a name="L322"></a><tt class="py-lineno">322</tt>  <tt class="py-line">            <tt class="py-name">copy_number</tt><tt class="py-op">=</tt><tt class="py-number">1</tt> </tt>
<a name="L323"></a><tt class="py-lineno">323</tt>  <tt class="py-line">            <tt class="py-keyword">while</tt> <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">exists</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L324"></a><tt class="py-lineno">324</tt>  <tt class="py-line">                <tt class="py-name">copy_number</tt><tt class="py-op">+=</tt><tt class="py-number">1</tt> </tt>
<a name="L325"></a><tt class="py-lineno">325</tt>  <tt class="py-line">                <tt class="py-name">picture_directory_path</tt><tt class="py-op">=</tt><tt class="py-op">(</tt><tt class="py-name">original_picture_directory_path</tt>  </tt>
<a name="L326"></a><tt class="py-lineno">326</tt>  <tt class="py-line">                                        <tt class="py-op">+</tt> <tt class="py-string">'_copy('</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">copy_number</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-string">')'</tt><tt class="py-op">)</tt> </tt>
<a name="L327"></a><tt class="py-lineno">327</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L328"></a><tt class="py-lineno">328</tt>  <tt class="py-line">            <tt class="py-name">shutil</tt><tt class="py-op">.</tt><tt class="py-name">rmtree</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt><tt class="py-op">)</tt> </tt>
<a name="L329"></a><tt class="py-lineno">329</tt>  <tt class="py-line">    <tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">mkdir</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt><tt class="py-op">)</tt> </tt>
<a name="L330"></a><tt class="py-lineno">330</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">picture_directory_path</tt> </tt>
</div><a name="L331"></a><tt class="py-lineno">331</tt>  <tt class="py-line"> </tt>
<a name="L332"></a><tt class="py-lineno">332</tt>  <tt class="py-line"> </tt>
<a name="run_pointwiseproduct"></a><div id="run_pointwiseproduct-def"><a name="L333"></a><tt class="py-lineno">333</tt> <a class="py-toggle" href="#" id="run_pointwiseproduct-toggle" onclick="return toggle('run_pointwiseproduct');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#run_pointwiseproduct">run_pointwiseproduct</a><tt class="py-op">(</tt><tt class="py-param">mce_file</tt><tt class="py-op">,</tt> <tt class="py-param">save_directory_path</tt><tt class="py-op">,</tt> <tt class="py-param">sum_filter</tt><tt class="py-op">,</tt>  </tt>
<a name="L334"></a><tt class="py-lineno">334</tt>  <tt class="py-line">        <tt class="py-param">non_columns</tt><tt class="py-op">,</tt> <tt class="py-param">non_rows</tt><tt class="py-op">,</tt> <tt class="py-param">non_detectors</tt><tt class="py-op">,</tt> <tt class="py-param">flipper</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="run_pointwiseproduct-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="run_pointwiseproduct-expanded"><a name="L335"></a><tt class="py-lineno">335</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Generates an npz file with the to_file</tt> </tt>
<a name="L336"></a><tt class="py-lineno">336</tt>  <tt class="py-line"><tt class="py-docstring">    function of PointwiseProduct class according to the parameters. The npz</tt> </tt>
<a name="L337"></a><tt class="py-lineno">337</tt>  <tt class="py-line"><tt class="py-docstring">    file will have arrays dealing with the pointwise product of data in an mce</tt> </tt>
<a name="L338"></a><tt class="py-lineno">338</tt>  <tt class="py-line"><tt class="py-docstring">    file.</tt> </tt>
<a name="L339"></a><tt class="py-lineno">339</tt>  <tt class="py-line"><tt class="py-docstring">    @param mce_file: the whole mce file path from which the pointwise product</tt> </tt>
<a name="L340"></a><tt class="py-lineno">340</tt>  <tt class="py-line"><tt class="py-docstring">    will be calculated. This file will be read by the mce_data module.</tt> </tt>
<a name="L341"></a><tt class="py-lineno">341</tt>  <tt class="py-line"><tt class="py-docstring">    @type mce_file: str</tt> </tt>
<a name="L342"></a><tt class="py-lineno">342</tt>  <tt class="py-line"><tt class="py-docstring">    @param save_directory_path: the directory path where the npz file will be</tt> </tt>
<a name="L343"></a><tt class="py-lineno">343</tt>  <tt class="py-line"><tt class="py-docstring">    saved in.</tt> </tt>
<a name="L344"></a><tt class="py-lineno">344</tt>  <tt class="py-line"><tt class="py-docstring">    @type save_directory_path: str</tt> </tt>
<a name="L345"></a><tt class="py-lineno">345</tt>  <tt class="py-line"><tt class="py-docstring">    @param sum_filter: indicates the filter type of the data. This parameter is</tt> </tt>
<a name="L346"></a><tt class="py-lineno">346</tt>  <tt class="py-line"><tt class="py-docstring">    passed directly into PointwiseProduct. Options are None, 'array_sum',</tt> </tt>
<a name="L347"></a><tt class="py-lineno">347</tt>  <tt class="py-line"><tt class="py-docstring">    'col_sum', and 'row_sum'.</tt> </tt>
<a name="L348"></a><tt class="py-lineno">348</tt>  <tt class="py-line"><tt class="py-docstring">    @type sum_filter: str</tt> </tt>
<a name="L349"></a><tt class="py-lineno">349</tt>  <tt class="py-line"><tt class="py-docstring">    @param non_columns: the columns to set to zero. These columns will not</tt> </tt>
<a name="L350"></a><tt class="py-lineno">350</tt>  <tt class="py-line"><tt class="py-docstring">    affect any calculations.</tt> </tt>
<a name="L351"></a><tt class="py-lineno">351</tt>  <tt class="py-line"><tt class="py-docstring">    @type non_columns: tuple/list/numpy array, shape:(*)</tt> </tt>
<a name="L352"></a><tt class="py-lineno">352</tt>  <tt class="py-line"><tt class="py-docstring">    @param non_rows: the rows to set to zero. These rows will not affect any</tt> </tt>
<a name="L353"></a><tt class="py-lineno">353</tt>  <tt class="py-line"><tt class="py-docstring">    calculations.</tt> </tt>
<a name="L354"></a><tt class="py-lineno">354</tt>  <tt class="py-line"><tt class="py-docstring">    @type non_rows: tuple/list/numpy array, shape:(*)</tt> </tt>
<a name="L355"></a><tt class="py-lineno">355</tt>  <tt class="py-line"><tt class="py-docstring">    @param non_detectors: the detectors to set to zero. These detectors will</tt> </tt>
<a name="L356"></a><tt class="py-lineno">356</tt>  <tt class="py-line"><tt class="py-docstring">    not affect any calculations.</tt> </tt>
<a name="L357"></a><tt class="py-lineno">357</tt>  <tt class="py-line"><tt class="py-docstring">    @type non_detectors: list/numpy array, shape:(*,2) </tt> </tt>
<a name="L358"></a><tt class="py-lineno">358</tt>  <tt class="py-line"><tt class="py-docstring">    @param flipper: indicates how to flip the columns in the data. If None, the</tt> </tt>
<a name="L359"></a><tt class="py-lineno">359</tt>  <tt class="py-line"><tt class="py-docstring">    data is not flipped. This parameter will be passed into eval(), and must</tt> </tt>
<a name="L360"></a><tt class="py-lineno">360</tt>  <tt class="py-line"><tt class="py-docstring">    result in a list or tuple of length equal to the number of columns. -1</tt> </tt>
<a name="L361"></a><tt class="py-lineno">361</tt>  <tt class="py-line"><tt class="py-docstring">    flips the column, while 1 does not.</tt> </tt>
<a name="L362"></a><tt class="py-lineno">362</tt>  <tt class="py-line"><tt class="py-docstring">    @type flipper: str '''</tt> </tt>
<a name="L363"></a><tt class="py-lineno">363</tt>  <tt class="py-line">    <tt class="py-name">mce_data</tt><tt class="py-op">=</tt><tt id="link-96" class="py-name"><a title="code.common.filehandler" class="py-name" href="#" onclick="return doclink('link-96', 'filehandler', 'link-9');">filehandler</a></tt><tt class="py-op">.</tt><tt id="link-97" class="py-name" targets="Function code.common.filehandler.get_mce_data()=code.common.filehandler-module.html#get_mce_data"><a title="code.common.filehandler.get_mce_data" class="py-name" href="#" onclick="return doclink('link-97', 'get_mce_data', 'link-97');">get_mce_data</a></tt><tt class="py-op">(</tt><tt class="py-name">mce_file</tt><tt class="py-op">,</tt> <tt class="py-name">row_col</tt><tt class="py-op">=</tt><tt class="py-name">True</tt><tt class="py-op">)</tt> </tt>
<a name="L364"></a><tt class="py-lineno">364</tt>  <tt class="py-line">    <tt class="py-keyword">if</tt> <tt class="py-name">flipper</tt><tt class="py-op">!=</tt><tt class="py-name">None</tt><tt class="py-op">:</tt> </tt>
<a name="L365"></a><tt class="py-lineno">365</tt>  <tt class="py-line">        <tt class="py-name">flipper</tt><tt class="py-op">=</tt><tt class="py-name">eval</tt><tt class="py-op">(</tt><tt class="py-name">flipper</tt><tt class="py-op">)</tt> </tt>
<a name="L366"></a><tt class="py-lineno">366</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">flipper</tt><tt class="py-op">)</tt><tt class="py-op">==</tt><tt class="py-name">mce_data</tt><tt class="py-op">.</tt><tt class="py-name">shape</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">:</tt> </tt>
<a name="L367"></a><tt class="py-lineno">367</tt>  <tt class="py-line">            <tt class="py-keyword">for</tt> <tt class="py-name">i</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">,</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">flipper</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L368"></a><tt class="py-lineno">368</tt>  <tt class="py-line">                <tt class="py-name">mce_data</tt><tt class="py-op">[</tt><tt class="py-op">:</tt><tt class="py-op">,</tt><tt class="py-name">i</tt><tt class="py-op">,</tt><tt class="py-op">:</tt><tt class="py-op">]</tt><tt class="py-op">=</tt><tt class="py-name">flipper</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt><tt class="py-op">*</tt><tt class="py-name">mce_data</tt><tt class="py-op">[</tt><tt class="py-op">:</tt><tt class="py-op">,</tt><tt class="py-name">i</tt><tt class="py-op">,</tt><tt class="py-op">:</tt><tt class="py-op">]</tt> </tt>
<a name="L369"></a><tt class="py-lineno">369</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L370"></a><tt class="py-lineno">370</tt>  <tt class="py-line">            <tt class="py-keyword">raise</tt> <tt class="py-name">ValueError</tt> <tt class="py-op">(</tt> </tt>
<a name="L371"></a><tt class="py-lineno">371</tt>  <tt class="py-line">                <tt class="py-string">'The length of flipper different from the number of columns.'</tt><tt class="py-op">)</tt> </tt>
<a name="L372"></a><tt class="py-lineno">372</tt>  <tt class="py-line">    <tt class="py-name">pointwise_product_analyzer</tt><tt class="py-op">=</tt><tt id="link-98" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct" class="py-name" href="#" onclick="return doclink('link-98', 'PointwiseProduct', 'link-1');">PointwiseProduct</a></tt><tt class="py-op">(</tt> </tt>
<a name="L373"></a><tt class="py-lineno">373</tt>  <tt class="py-line">        <tt class="py-name">mce_data</tt><tt class="py-op">,</tt> <tt id="link-99" class="py-name" targets="Variable code.innerproduct.pointwiseproduct.PointwiseProduct.non_cols=code.innerproduct.pointwiseproduct.PointwiseProduct-class.html#non_cols,Variable code.innerproduct.similaritydrawer.SimilarityDrawer.non_cols=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#non_cols"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_cols
code.innerproduct.similaritydrawer.SimilarityDrawer.non_cols" class="py-name" href="#" onclick="return doclink('link-99', 'non_cols', 'link-99');">non_cols</a></tt><tt class="py-op">=</tt><tt class="py-name">non_columns</tt><tt class="py-op">,</tt> <tt id="link-100" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-100', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">=</tt><tt id="link-101" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-101', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">,</tt>  </tt>
<a name="L374"></a><tt class="py-lineno">374</tt>  <tt class="py-line">        <tt id="link-102" class="py-name" targets="Variable code.innerproduct.pointwiseproduct.PointwiseProduct.non_elements=code.innerproduct.pointwiseproduct.PointwiseProduct-class.html#non_elements"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_elements" class="py-name" href="#" onclick="return doclink('link-102', 'non_elements', 'link-102');">non_elements</a></tt><tt class="py-op">=</tt><tt id="link-103" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-103', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">,</tt> <tt id="link-104" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-104', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">=</tt><tt id="link-105" class="py-name"><a title="code.common.multistreamfunctions.sum_filter" class="py-name" href="#" onclick="return doclink('link-105', 'sum_filter', 'link-33');">sum_filter</a></tt><tt class="py-op">)</tt> </tt>
<a name="L375"></a><tt class="py-lineno">375</tt>  <tt class="py-line">    <tt class="py-name">npz_file_path</tt><tt class="py-op">=</tt><tt class="py-name">os</tt><tt class="py-op">.</tt><tt class="py-name">path</tt><tt class="py-op">.</tt><tt class="py-name">join</tt><tt class="py-op">(</tt><tt class="py-name">save_directory_path</tt><tt class="py-op">,</tt> <tt class="py-string">'undescribed_file.npz'</tt><tt class="py-op">)</tt> </tt>
<a name="L376"></a><tt class="py-lineno">376</tt>  <tt class="py-line">    <tt class="py-name">pointwise_product_analyzer</tt><tt class="py-op">.</tt><tt id="link-106" class="py-name" targets="Method code.innerproduct.pointwiseproduct.PointwiseProduct.to_file()=code.innerproduct.pointwiseproduct.PointwiseProduct-class.html#to_file"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.to_file" class="py-name" href="#" onclick="return doclink('link-106', 'to_file', 'link-106');">to_file</a></tt><tt class="py-op">(</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">)</tt> </tt>
<a name="L377"></a><tt class="py-lineno">377</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">npz_file_path</tt> </tt>
</div><a name="L378"></a><tt class="py-lineno">378</tt>  <tt class="py-line"> </tt>
<a name="L379"></a><tt class="py-lineno">379</tt>  <tt class="py-line">     </tt>
<a name="run_similaritydrawer"></a><div id="run_similaritydrawer-def"><a name="L380"></a><tt class="py-lineno">380</tt> <a class="py-toggle" href="#" id="run_similaritydrawer-toggle" onclick="return toggle('run_similaritydrawer');">-</a><tt class="py-line"><tt class="py-keyword">def</tt> <a class="py-def-name" href="code.innerproduct.script-module.html#run_similaritydrawer">run_similaritydrawer</a><tt class="py-op">(</tt><tt class="py-param">npz_file_path</tt><tt class="py-op">,</tt> <tt class="py-param">picture_directory_path</tt><tt class="py-op">,</tt>  </tt>
<a name="L381"></a><tt class="py-lineno">381</tt>  <tt class="py-line">                         <tt class="py-param">non_columns</tt><tt class="py-op">,</tt> <tt class="py-param">non_rows</tt><tt class="py-op">,</tt> <tt class="py-param">non_detectors</tt><tt class="py-op">,</tt> <tt class="py-param">cut_nons</tt><tt class="py-op">,</tt>  </tt>
<a name="L382"></a><tt class="py-lineno">382</tt>  <tt class="py-line">                         <tt class="py-param">limit</tt><tt class="py-op">,</tt> <tt class="py-param">column_vs_column</tt><tt class="py-op">,</tt> <tt class="py-param">row_vs_row</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="run_similaritydrawer-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="run_similaritydrawer-expanded"><a name="L383"></a><tt class="py-lineno">383</tt>  <tt class="py-line">    <tt class="py-docstring">'''Script internal function. Draws pictures with an npz file using the</tt> </tt>
<a name="L384"></a><tt class="py-lineno">384</tt>  <tt class="py-line"><tt class="py-docstring">    module similaritydrawer.</tt> </tt>
<a name="L385"></a><tt class="py-lineno">385</tt>  <tt class="py-line"><tt class="py-docstring">    @param npz_file_path: the whole filepath from where data will be read. The</tt> </tt>
<a name="L386"></a><tt class="py-lineno">386</tt>  <tt class="py-line"><tt class="py-docstring">    data will be used to draw the pictures. The npz file should be one created</tt> </tt>
<a name="L387"></a><tt class="py-lineno">387</tt>  <tt class="py-line"><tt class="py-docstring">    by PointwiseProduct.to_file function.</tt> </tt>
<a name="L388"></a><tt class="py-lineno">388</tt>  <tt class="py-line"><tt class="py-docstring">    @type npz_file_path: str</tt> </tt>
<a name="L389"></a><tt class="py-lineno">389</tt>  <tt class="py-line"><tt class="py-docstring">    @param picture_directory_path: the whole path of the directory where the</tt> </tt>
<a name="L390"></a><tt class="py-lineno">390</tt>  <tt class="py-line"><tt class="py-docstring">    pictures are to be saved.</tt> </tt>
<a name="L391"></a><tt class="py-lineno">391</tt>  <tt class="py-line"><tt class="py-docstring">    @type picture_directory_path: str</tt> </tt>
<a name="L392"></a><tt class="py-lineno">392</tt>  <tt class="py-line"><tt class="py-docstring">    @param non_columns: the columns to be ignored. These columns will not be</tt> </tt>
<a name="L393"></a><tt class="py-lineno">393</tt>  <tt class="py-line"><tt class="py-docstring">    used in any analysis and will not be drawn.</tt> </tt>
<a name="L394"></a><tt class="py-lineno">394</tt>  <tt class="py-line"><tt class="py-docstring">    @type non_columns: tuple/list/numpy array, shape:(*)</tt> </tt>
<a name="L395"></a><tt class="py-lineno">395</tt>  <tt class="py-line"><tt class="py-docstring">    @param non_rows: the rows to be ignored. These rows will not affect any be</tt> </tt>
<a name="L396"></a><tt class="py-lineno">396</tt>  <tt class="py-line"><tt class="py-docstring">    used in any analysis and will not be drawn.</tt> </tt>
<a name="L397"></a><tt class="py-lineno">397</tt>  <tt class="py-line"><tt class="py-docstring">    @type non_rows: tuple/list/numpy array, shape:(*)</tt> </tt>
<a name="L398"></a><tt class="py-lineno">398</tt>  <tt class="py-line"><tt class="py-docstring">    @param non_detectors: the detectors to be ignored. These detectors will not</tt> </tt>
<a name="L399"></a><tt class="py-lineno">399</tt>  <tt class="py-line"><tt class="py-docstring">    be used in any analysis and will not be drawn..</tt> </tt>
<a name="L400"></a><tt class="py-lineno">400</tt>  <tt class="py-line"><tt class="py-docstring">    @type non_detectors: list/numpy array, shape:(*,2) </tt> </tt>
<a name="L401"></a><tt class="py-lineno">401</tt>  <tt class="py-line"><tt class="py-docstring">    @param cut_nons: indicate whether or not the non_columns and non_rows will</tt> </tt>
<a name="L402"></a><tt class="py-lineno">402</tt>  <tt class="py-line"><tt class="py-docstring">    be cut in plots. If True, they will be cut out of the plot. If False, they</tt> </tt>
<a name="L403"></a><tt class="py-lineno">403</tt>  <tt class="py-line"><tt class="py-docstring">    will be shown as white. </tt> </tt>
<a name="L404"></a><tt class="py-lineno">404</tt>  <tt class="py-line"><tt class="py-docstring">    @type cut_nons: boolean</tt> </tt>
<a name="L405"></a><tt class="py-lineno">405</tt>  <tt class="py-line"><tt class="py-docstring">    @param limit: the class_limit for similarity drawer. This parameter can be</tt> </tt>
<a name="L406"></a><tt class="py-lineno">406</tt>  <tt class="py-line"><tt class="py-docstring">    None, 'full', 'non_auto', 'inliers' or (x, y).</tt> </tt>
<a name="L407"></a><tt class="py-lineno">407</tt>  <tt class="py-line"><tt class="py-docstring">    @type limit: str; tuple, shape:(*)</tt> </tt>
<a name="L408"></a><tt class="py-lineno">408</tt>  <tt class="py-line"><tt class="py-docstring">    @param column_vs_column: a list of column vs column pointwise products to</tt> </tt>
<a name="L409"></a><tt class="py-lineno">409</tt>  <tt class="py-line"><tt class="py-docstring">    be plotted. Each column vs column is to be represented by a string '(x,y)',</tt> </tt>
<a name="L410"></a><tt class="py-lineno">410</tt>  <tt class="py-line"><tt class="py-docstring">    where x and y are the column numbers.</tt> </tt>
<a name="L411"></a><tt class="py-lineno">411</tt>  <tt class="py-line"><tt class="py-docstring">    @type column_vs_column: list of str</tt> </tt>
<a name="L412"></a><tt class="py-lineno">412</tt>  <tt class="py-line"><tt class="py-docstring">    @param row_vs_row: a list of row vs row pointwise products to be</tt> </tt>
<a name="L413"></a><tt class="py-lineno">413</tt>  <tt class="py-line"><tt class="py-docstring">    plotted. Each row vs row is to be represented by a string '(x,y)', where x</tt> </tt>
<a name="L414"></a><tt class="py-lineno">414</tt>  <tt class="py-line"><tt class="py-docstring">    and y are the row numbers.</tt> </tt>
<a name="L415"></a><tt class="py-lineno">415</tt>  <tt class="py-line"><tt class="py-docstring">    @type row_vs_row: list of str '''</tt> </tt>
<a name="L416"></a><tt class="py-lineno">416</tt>  <tt class="py-line">    <tt class="py-name">npz_dict</tt><tt class="py-op">=</tt><tt class="py-name">np</tt><tt class="py-op">.</tt><tt class="py-name">load</tt><tt class="py-op">(</tt><tt class="py-name">npz_file_path</tt><tt class="py-op">)</tt> </tt>
<a name="L417"></a><tt class="py-lineno">417</tt>  <tt class="py-line">    <tt class="py-name">similarity_drawer</tt><tt class="py-op">=</tt><tt id="link-107" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer" class="py-name" href="#" onclick="return doclink('link-107', 'SimilarityDrawer', 'link-3');">SimilarityDrawer</a></tt><tt class="py-op">(</tt> </tt>
<a name="L418"></a><tt class="py-lineno">418</tt>  <tt class="py-line">        <tt class="py-name">npz_dict</tt><tt class="py-op">,</tt> <tt id="link-108" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_cols
code.innerproduct.similaritydrawer.SimilarityDrawer.non_cols" class="py-name" href="#" onclick="return doclink('link-108', 'non_cols', 'link-99');">non_cols</a></tt><tt class="py-op">=</tt><tt class="py-name">non_columns</tt><tt class="py-op">,</tt> <tt id="link-109" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-109', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">=</tt><tt id="link-110" class="py-name"><a title="code.innerproduct.pointwiseproduct.PointwiseProduct.non_rows
code.innerproduct.similaritydrawer.SimilarityDrawer.non_rows" class="py-name" href="#" onclick="return doclink('link-110', 'non_rows', 'link-50');">non_rows</a></tt><tt class="py-op">,</tt>  </tt>
<a name="L419"></a><tt class="py-lineno">419</tt>  <tt class="py-line">        <tt id="link-111" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-111', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">=</tt><tt id="link-112" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.non_detectors" class="py-name" href="#" onclick="return doclink('link-112', 'non_detectors', 'link-22');">non_detectors</a></tt><tt class="py-op">,</tt> <tt class="py-name">cut_nons</tt><tt class="py-op">=</tt><tt class="py-name">cut_nons</tt><tt class="py-op">,</tt> <tt class="py-name">class_limit</tt><tt class="py-op">=</tt><tt class="py-name">limit</tt><tt class="py-op">)</tt> </tt>
<a name="L420"></a><tt class="py-lineno">420</tt>  <tt class="py-line">    <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-113" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_data_data()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_data_data"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_data_data" class="py-name" href="#" onclick="return doclink('link-113', 'plot_data_data', 'link-113');">plot_data_data</a></tt><tt class="py-op">(</tt><tt class="py-name">dominance</tt><tt class="py-op">=</tt><tt class="py-string">'column'</tt><tt class="py-op">)</tt> </tt>
<a name="L421"></a><tt class="py-lineno">421</tt>  <tt class="py-line">    <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt>  </tt>
<a name="L422"></a><tt class="py-lineno">422</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'/Column_Dominated_Pointwise_Product_of_All_Data'</tt><tt class="py-op">)</tt> </tt>
<a name="L423"></a><tt class="py-lineno">423</tt>  <tt class="py-line">    <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-114" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_data_data" class="py-name" href="#" onclick="return doclink('link-114', 'plot_data_data', 'link-113');">plot_data_data</a></tt><tt class="py-op">(</tt><tt class="py-name">dominance</tt><tt class="py-op">=</tt><tt class="py-string">'row'</tt><tt class="py-op">)</tt> </tt>
<a name="L424"></a><tt class="py-lineno">424</tt>  <tt class="py-line">    <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt>  </tt>
<a name="L425"></a><tt class="py-lineno">425</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'/Row_Dominated_Pointwise_product_of_All_Data'</tt><tt class="py-op">)</tt> </tt>
<a name="L426"></a><tt class="py-lineno">426</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">col</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">,</tt> <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-115" class="py-name" targets="Variable code.innerproduct.similaritydrawer.SimilarityDrawer.number_of_cols=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#number_of_cols"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.number_of_cols" class="py-name" href="#" onclick="return doclink('link-115', 'number_of_cols', 'link-115');">number_of_cols</a></tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L427"></a><tt class="py-lineno">427</tt>  <tt class="py-line">        <tt class="py-keyword">try</tt><tt class="py-op">:</tt> </tt>
<a name="L428"></a><tt class="py-lineno">428</tt>  <tt class="py-line">            <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-116" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_col_sum_col_data()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_col_sum_col_data"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_col_sum_col_data" class="py-name" href="#" onclick="return doclink('link-116', 'plot_col_sum_col_data', 'link-116');">plot_col_sum_col_data</a></tt><tt class="py-op">(</tt><tt class="py-name">col</tt><tt class="py-op">)</tt> </tt>
<a name="L429"></a><tt class="py-lineno">429</tt>  <tt class="py-line">        <tt class="py-keyword">except</tt> <tt id="link-117" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-117', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-118" class="py-name" targets="Class code.common.exceptions.ExistenceError=code.common.exceptions.ExistenceError-class.html"><a title="code.common.exceptions.ExistenceError" class="py-name" href="#" onclick="return doclink('link-118', 'ExistenceError', 'link-118');">ExistenceError</a></tt><tt class="py-op">:</tt> </tt>
<a name="L430"></a><tt class="py-lineno">430</tt>  <tt class="py-line">            <tt class="py-keyword">continue</tt> </tt>
<a name="L431"></a><tt class="py-lineno">431</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L432"></a><tt class="py-lineno">432</tt>  <tt class="py-line">            <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt> </tt>
<a name="L433"></a><tt class="py-lineno">433</tt>  <tt class="py-line">                <tt class="py-name">picture_directory_path</tt> <tt class="py-op">+</tt>  </tt>
<a name="L434"></a><tt class="py-lineno">434</tt>  <tt class="py-line">                <tt class="py-string">'/Pointwise_Product_between_All_Data_and_the_Sum_of_Col_'</tt> </tt>
<a name="L435"></a><tt class="py-lineno">435</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">col</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L436"></a><tt class="py-lineno">436</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">row</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-number">0</tt><tt class="py-op">,</tt> <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-119" class="py-name" targets="Variable code.innerproduct.similaritydrawer.SimilarityDrawer.number_of_rows=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#number_of_rows"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.number_of_rows" class="py-name" href="#" onclick="return doclink('link-119', 'number_of_rows', 'link-119');">number_of_rows</a></tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L437"></a><tt class="py-lineno">437</tt>  <tt class="py-line">        <tt class="py-keyword">try</tt><tt class="py-op">:</tt> </tt>
<a name="L438"></a><tt class="py-lineno">438</tt>  <tt class="py-line">            <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-120" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_row_sum_row_data()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_row_sum_row_data"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_row_sum_row_data" class="py-name" href="#" onclick="return doclink('link-120', 'plot_row_sum_row_data', 'link-120');">plot_row_sum_row_data</a></tt><tt class="py-op">(</tt><tt class="py-name">row</tt><tt class="py-op">)</tt> </tt>
<a name="L439"></a><tt class="py-lineno">439</tt>  <tt class="py-line">        <tt class="py-keyword">except</tt> <tt id="link-121" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-121', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-122" class="py-name"><a title="code.common.exceptions.ExistenceError" class="py-name" href="#" onclick="return doclink('link-122', 'ExistenceError', 'link-118');">ExistenceError</a></tt><tt class="py-op">:</tt> </tt>
<a name="L440"></a><tt class="py-lineno">440</tt>  <tt class="py-line">            <tt class="py-keyword">continue</tt> </tt>
<a name="L441"></a><tt class="py-lineno">441</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L442"></a><tt class="py-lineno">442</tt>  <tt class="py-line">            <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt> </tt>
<a name="L443"></a><tt class="py-lineno">443</tt>  <tt class="py-line">                <tt class="py-name">picture_directory_path</tt>  </tt>
<a name="L444"></a><tt class="py-lineno">444</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'/Pointwise_Product_between_All_Data_and_the_Sum_of_Row_'</tt>  </tt>
<a name="L445"></a><tt class="py-lineno">445</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">row</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L446"></a><tt class="py-lineno">446</tt>  <tt class="py-line">    <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-123" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_array_sum_data()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_array_sum_data"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_array_sum_data" class="py-name" href="#" onclick="return doclink('link-123', 'plot_array_sum_data', 'link-123');">plot_array_sum_data</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L447"></a><tt class="py-lineno">447</tt>  <tt class="py-line">    <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt> </tt>
<a name="L448"></a><tt class="py-lineno">448</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'/Pointwise_Product_between_All_Data_and_the_Sum_of_Row_'</tt> </tt>
<a name="L449"></a><tt class="py-lineno">449</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">row</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L450"></a><tt class="py-lineno">450</tt>  <tt class="py-line">    <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-124" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_col_sum_col_sum()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_col_sum_col_sum"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_col_sum_col_sum" class="py-name" href="#" onclick="return doclink('link-124', 'plot_col_sum_col_sum', 'link-124');">plot_col_sum_col_sum</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L451"></a><tt class="py-lineno">451</tt>  <tt class="py-line">    <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt> </tt>
<a name="L452"></a><tt class="py-lineno">452</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'/Pointwise_Product_between_Sum_of_Rows_in_Cols'</tt> </tt>
<a name="L453"></a><tt class="py-lineno">453</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'_and_Sum_of_Rows_in_Cols'</tt><tt class="py-op">)</tt> </tt>
<a name="L454"></a><tt class="py-lineno">454</tt>  <tt class="py-line">    <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-125" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_row_sum_row_sum()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_row_sum_row_sum"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_row_sum_row_sum" class="py-name" href="#" onclick="return doclink('link-125', 'plot_row_sum_row_sum', 'link-125');">plot_row_sum_row_sum</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L455"></a><tt class="py-lineno">455</tt>  <tt class="py-line">    <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt> </tt>
<a name="L456"></a><tt class="py-lineno">456</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'/Pointwise_Product_between_Sum_of_Cols_in_Rows'</tt> </tt>
<a name="L457"></a><tt class="py-lineno">457</tt>  <tt class="py-line">                <tt class="py-op">+</tt> <tt class="py-string">'_and_Sum_of_Cols_in_Rows'</tt><tt class="py-op">)</tt> </tt>
<a name="L458"></a><tt class="py-lineno">458</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">col_col</tt> <tt class="py-keyword">in</tt> <tt class="py-name">column_vs_column</tt><tt class="py-op">:</tt> </tt>
<a name="L459"></a><tt class="py-lineno">459</tt>  <tt class="py-line">        <tt class="py-name">col_col</tt><tt class="py-op">=</tt><tt class="py-name">eval</tt><tt class="py-op">(</tt><tt class="py-name">col_col</tt><tt class="py-op">)</tt> </tt>
<a name="L460"></a><tt class="py-lineno">460</tt>  <tt class="py-line">        <tt class="py-keyword">try</tt><tt class="py-op">:</tt>  </tt>
<a name="L461"></a><tt class="py-lineno">461</tt>  <tt class="py-line">            <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-126" class="py-name" targets="Method code.innerproduct.similaritydrawer.SimilarityDrawer.plot_single_block()=code.innerproduct.similaritydrawer.SimilarityDrawer-class.html#plot_single_block"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_single_block" class="py-name" href="#" onclick="return doclink('link-126', 'plot_single_block', 'link-126');">plot_single_block</a></tt><tt class="py-op">(</tt><tt class="py-name">col_col</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">col_col</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L462"></a><tt class="py-lineno">462</tt>  <tt class="py-line">                                                <tt class="py-name">dominance</tt><tt class="py-op">=</tt><tt class="py-string">'column'</tt><tt class="py-op">)</tt> </tt>
<a name="L463"></a><tt class="py-lineno">463</tt>  <tt class="py-line">        <tt class="py-keyword">except</tt> <tt id="link-127" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-127', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-128" class="py-name"><a title="code.common.exceptions.ExistenceError" class="py-name" href="#" onclick="return doclink('link-128', 'ExistenceError', 'link-118');">ExistenceError</a></tt><tt class="py-op">:</tt> </tt>
<a name="L464"></a><tt class="py-lineno">464</tt>  <tt class="py-line">            <tt class="py-keyword">print</tt> <tt class="py-op">(</tt><tt class="py-string">'Failed to plot Col'</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">col_col</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-string">' vs '</tt>  </tt>
<a name="L465"></a><tt class="py-lineno">465</tt>  <tt class="py-line">                   <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">col_col</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-string">' because one of them is in non_cols'</tt><tt class="py-op">)</tt> </tt>
<a name="L466"></a><tt class="py-lineno">466</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L467"></a><tt class="py-lineno">467</tt>  <tt class="py-line">            <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt>  </tt>
<a name="L468"></a><tt class="py-lineno">468</tt>  <tt class="py-line">                        <tt class="py-op">+</tt> <tt class="py-string">'/Pointwise_Product_between_Col_'</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">col_col</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt>  </tt>
<a name="L469"></a><tt class="py-lineno">469</tt>  <tt class="py-line">                        <tt class="py-op">+</tt> <tt class="py-string">'_and_Col_'</tt> <tt class="py-op">+</tt><tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">col_col</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L470"></a><tt class="py-lineno">470</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">row_row</tt> <tt class="py-keyword">in</tt> <tt class="py-name">row_vs_row</tt><tt class="py-op">:</tt> </tt>
<a name="L471"></a><tt class="py-lineno">471</tt>  <tt class="py-line">        <tt class="py-name">row_row</tt><tt class="py-op">=</tt><tt class="py-name">eval</tt><tt class="py-op">(</tt><tt class="py-name">row_row</tt><tt class="py-op">)</tt> </tt>
<a name="L472"></a><tt class="py-lineno">472</tt>  <tt class="py-line">        <tt class="py-keyword">try</tt><tt class="py-op">:</tt>  </tt>
<a name="L473"></a><tt class="py-lineno">473</tt>  <tt class="py-line">            <tt class="py-name">similarity_drawer</tt><tt class="py-op">.</tt><tt id="link-129" class="py-name"><a title="code.innerproduct.similaritydrawer.SimilarityDrawer.plot_single_block" class="py-name" href="#" onclick="return doclink('link-129', 'plot_single_block', 'link-126');">plot_single_block</a></tt><tt class="py-op">(</tt><tt class="py-name">row_row</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">,</tt> <tt class="py-name">row_row</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">,</tt>  </tt>
<a name="L474"></a><tt class="py-lineno">474</tt>  <tt class="py-line">                                                <tt class="py-name">dominance</tt><tt class="py-op">=</tt><tt class="py-string">'row'</tt><tt class="py-op">)</tt> </tt>
<a name="L475"></a><tt class="py-lineno">475</tt>  <tt class="py-line">        <tt class="py-keyword">except</tt> <tt id="link-130" class="py-name"><a title="code.common.exceptions" class="py-name" href="#" onclick="return doclink('link-130', 'exceptions', 'link-6');">exceptions</a></tt><tt class="py-op">.</tt><tt id="link-131" class="py-name"><a title="code.common.exceptions.ExistenceError" class="py-name" href="#" onclick="return doclink('link-131', 'ExistenceError', 'link-118');">ExistenceError</a></tt><tt class="py-op">:</tt> </tt>
<a name="L476"></a><tt class="py-lineno">476</tt>  <tt class="py-line">            <tt class="py-keyword">print</tt> <tt class="py-op">(</tt><tt class="py-string">'Failed to plot Row'</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">row_row</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-string">' vs '</tt>  </tt>
<a name="L477"></a><tt class="py-lineno">477</tt>  <tt class="py-line">                   <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">row_row</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> <tt class="py-op">+</tt> <tt class="py-string">' because one of them is in non_rows'</tt><tt class="py-op">)</tt> </tt>
<a name="L478"></a><tt class="py-lineno">478</tt>  <tt class="py-line">        <tt class="py-keyword">else</tt><tt class="py-op">:</tt> </tt>
<a name="L479"></a><tt class="py-lineno">479</tt>  <tt class="py-line">            <tt class="py-name">plt</tt><tt class="py-op">.</tt><tt class="py-name">savefig</tt><tt class="py-op">(</tt><tt class="py-name">picture_directory_path</tt>  </tt>
<a name="L480"></a><tt class="py-lineno">480</tt>  <tt class="py-line">                        <tt class="py-op">+</tt> <tt class="py-string">'/Pointwise_Product_between_Row_'</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">row_row</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt>  </tt>
<a name="L481"></a><tt class="py-lineno">481</tt>  <tt class="py-line">                        <tt class="py-op">+</tt> <tt class="py-string">'_and_Row_'</tt> <tt class="py-op">+</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">row_row</tt><tt class="py-op">[</tt><tt class="py-number">1</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
</div><a name="L482"></a><tt class="py-lineno">482</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="code-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Project homepage -->
      <th class="navbar" align="right" width="100%">
        <table border="0" cellpadding="0" cellspacing="0">
          <tr><th class="navbar" align="center"
            >All</th>
          </tr></table></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Sun Nov  6 16:28:35 2011
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
