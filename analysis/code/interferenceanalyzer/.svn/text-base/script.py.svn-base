import os
import shutil
import argparse
import numpy as np
import matplotlib.pyplot as plt
import parse_data
from sphericalinterpreter import SphericalInterpreter
from code.common import exceptions


def parse_arguments():
    colour_plot_base_parser = get_colour_plot_base_parser()
    parser = argparse.ArgumentParser(
        description = 'Analyzes interference. '
        + 'To read arguments from the file filepath, use @filepath.',
        epilog = 'All angles are in degrees.', 
        fromfile_prefix_chars='@',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(
        title='subcommands', description='valid subcommands', 
        help='here are valid subcommands', dest='subcommand')
    data_parser=subparsers.add_parser(
        'data', parents = [colour_plot_base_parser],
        help = 'Finds the interference pattern of the sources and ' 
        + 'saves it as a picture and an analysis file. ' 
        + 'By default, it will save the files in a directory ' 
        + 'in the same directory as the input_file. ', 
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    data_parser.add_argument(
        'data_file', nargs='?', help= 'the path of the data file')
    data_parser.add_argument(
        '-dsl', '--directory_save_location',
        help = 'The location to place the save directory. If None, ' 
        + 'the save directory will be placed in the same directory '
        + 'as the input_file.',
        dest = 'directory_save_location')
    data_parser.add_argument(
        '-sdn', default='stuff', 
        help = 'the tag of the directory where the analysis will be saved. '
        + 'This tag will be appended to a generated name to create '
        + 'the name of the save directory.', 
        dest='save_directory_name') 
    data_parser.add_argument(
        '-nsd', '--new_save_directory', action='store_true', default=False, 
        help='If an old directory with the same name as the save directory ' 
        + 'exists ,keep it and create a new directory to keep the new data.', 
        dest='new_save_directory')
    data_parser.add_argument(
        '-f', '--frequency', type=float, required=True, 
        help = 'the frequency of the wave in Hz.', dest='frequency')
    data_parser.add_argument(
        '-r', '--distance', type=float, required=True, 
        help = 'the radial distance from the center of the sources ' 
        + 'to plot the interference pattern.', 
        dest='distance')
    data_parser.add_argument('-c', '--center', required=True, help = "specifies the location of the center of the plot relative to the normal of the source disk's center. The input must be in spherical coordinates (theta, phi). Positive theta rotates x-axis towards postive y. Positive phi rotates original y axis towards postive x.", dest='center')
    data_parser.add_argument('-s', '--size', required=True, help= 'specifies the angular coverage of the plot in (theta, phi) format.', dest = 'size')
    data_parser.add_argument('-res', '--resolution', default=20, type=float, help = 'The resolution of the image in pixels per degree')
    npz_parser =subparsers.add_parser(
        'npz', parents = [colour_plot_base_parser],
        help="Reads a .npz file previously generated by this program, and"\
            " saves the interference pattern to .png files and an analysis"\
            " file.  By default, it will save the files in the same directory"\
            " as the input_file.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    npz_parser.add_argument(
        'npz_file', nargs='?', help= 'the path of the npz file')
    return parser.parse_args()


def get_colour_plot_base_parser():
    colour_plot_base_parser = argparse.ArgumentParser(add_help=False)
    colour_plot_base_parser.add_argument(
        '-cpdn', default = None,
        help = 'the tag of the directory to put the colour plots. '
        + 'Append to "colour_plot(_)".',
        dest = 'colour_plot_directory_name')
    colour_plot_base_parser.add_argument(
        '-ncpd', action='store_true', default=False,
        help = 'If a directory with the same name exist, '
        + 'then create a new directory.',
        dest = 'new_colour_plot_directory')
    colour_plot_base_parser.add_argument(
        '-al', default=None,
        help = 'set the limit in the amplitudes colour plots to [min, max]',
        dest = 'amplitude_colour_limit')
    colour_plot_base_parser.add_argument(
        '-nsql', default=None,
        help = 'set the limit in the norm squared colour plots to [min, max]',
        dest = 'norm_squared_colour_limit')
    return colour_plot_base_parser;


def interpret_and_run(args):
    if args.subcommand == 'data' or args.subcommand == 'npz':
        if args.amplitude_colour_limit==None:
            amplitude_colour_limit=None
        else:
            amplitude_colour_limit=eval(args.amplitude_colour_limit)
        if args.norm_squared_colour_limit==None:
            norm_squared_colour_limit=None
        else:
            norm_squared_colour_limit=eval(args.norm_squared_colour_limit)
    if args.subcommand == 'data':
        if args.data_file==None:
            raise exceptions.StupidityError('No data_file entered.')
        unoptimized_size=eval(args.size)
        center=eval(args.center)
        data=parse_data.read_data(args.data_file)
        args_dict = {
            'frequency': args.frequency, 'distance': args.distance, 
            'resolution': args.resolution, 'size': unoptimized_size, 
            'center':center,
            'source_locations':data[0], 'source_amplitudes':data[1]}
        main_directory_path=initialize_main_directory(
            args.data_file, args.directory_save_location, 
            args.save_directory_name, args.new_save_directory)
        spherical_interpreter = SphericalInterpreter("raw_data", args_dict)
        spherical_interpreter.to_analysis_file(
            os.path.join(main_directory_path, 'analysis_file.txt'))
        spherical_interpreter.to_npz_file(
            os.path.join(main_directory_path, 'npz_file.npz'))
        colour_plot_directory_path=initialize_colour_plot_directory(
            args.colour_plot_directory_name, main_directory_path,
            args.new_colour_plot_directory)
        to_colour_plot(spherical_interpreter,  colour_plot_directory_path,
                       amplitude_colour_limit, norm_squared_colour_limit)
    elif args.subcommand == 'npz':
        if args.npz_file==None:
            raise exceptions.StupidityError('No npz_file entered')
        if os.path.exists(args.npz_file):
            main_directory_path = os.path.dirname(args.npz_file)
            args_dict={'npz_dict': np.load(args.npz_file)}
        else:
            raise ValueError ('The specified npz_file does not exist')
        spherical_interpreter = SphericalInterpreter('npz_file', args_dict)
        spherical_interpreter.to_analysis_file(
            os.path.join(main_directory_path, 'analysis_file.txt'))
        colour_plot_directory_path=initialize_colour_plot_directory(
            args.colour_plot_directory_name, main_directory_path,
            args.new_colour_plot_directory)
        to_colour_plot(spherical_interpreter, colour_plot_directory_path,
                       amplitude_colour_limit, norm_squared_colour_limit)


def initialize_main_directory(input_file, directory_save_location, 
                              save_directory_name, new_save_directory):
    if os.path.exists(input_file)==False:
        raise ValueError('The specified input_file does not exist')
    if directory_save_location==None:
        save_directory_prefix=input_file
    else:
        if os.path.exists(directory_save_location):
            save_directory_prefix = os.path.join(directory_save_location,
                                                 os.path.split(input_file)[1])
        else:
            raise ValueError('The directory_save_location does not exist')
    save_directory_path=(save_directory_prefix + '_' + save_directory_name)
    if new_save_directory:
        original_save_directory_path=save_directory_path
        copy_number=1
        while os.path.exists(save_directory_path):
            copy_number+=1
            save_directory_path=(original_save_directory_path 
                                 + '_copy(' + str(copy_number) + ')')
    else:
        if os.path.exists(save_directory_path):
            shutil.rmtree(save_directory_path)
    os.mkdir(save_directory_path)
    return save_directory_path    


def initialize_colour_plot_directory(colour_plot_directory_name, 
                                     main_directory_path,
                                     new_colour_plot_directory):
    if colour_plot_directory_name==None:
        directory_path = os.path.join(
        main_directory_path, 'colour_plot')
    else:
        directory_path = os.path.join(
            main_directory_path,('colour_plot_' + colour_plot_directory_name))
    if new_colour_plot_directory:
        original_directory_path = directory_path
        copy_number=1
        while os.path.exists(directory_path):
            copy_number+=1
            directory_path =(original_directory_path 
                             + '_copy(' + str(copy_number) + ')')
    else:
        if os.path.exists(directory_path):
            shutil.rmtree(directory_path)
    os.mkdir(directory_path)
    return directory_path


def to_colour_plot(spherical_interpreter, colour_plot_directory_path,
                   amplitude_colour_limit, norm_squared_colour_limit):
    spherical_interpreter.draw('x Amplitudes', limit = amplitude_colour_limit)
    plt.savefig(colour_plot_directory_path + '/x_Amplitudes')
    spherical_interpreter.draw('y Amplitudes', limit = amplitude_colour_limit)
    plt.savefig(colour_plot_directory_path + '/y_Amplitudes')
    spherical_interpreter.draw('z Amplitudes', limit = amplitude_colour_limit)
    plt.savefig(colour_plot_directory_path + '/z_Amplitudes')
    spherical_interpreter.draw(
        'Norm Squared', limit = norm_squared_colour_limit)
    plt.savefig(colour_plot_directory_path + '/Absolute_Magnitude')
    plt.gcf().clear()
    spherical_interpreter.draw_profile('theta')
    plt.savefig(colour_plot_directory_path+'/theta_cross_section')
    plt.gcf().clear()
    spherical_interpreter.draw_profile('phi')
    plt.savefig(colour_plot_directory_path+'/phi_cross_section')
